/tmp/tmpXXcBicKB.asm:
     1                          MODULE z80_crt_asm_m4
     2                          LINE 0, "/opt/z88dk/lib/config//../..//libsrc/_DEVELOPMENT/target/z80/z80_crt.asm.m4"
/opt/z88dk/lib/config//../..//libsrc/_DEVELOPMENT/target/z80/z80_crt.asm.m4:
                                
     1                          
     2                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     3                          ; SELECT CRT0 FROM -STARTUP=N COMMANDLINE OPTION ;;;;;;;;;;;;;;
     4                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     5                          
     6                          
     7                          IF !DEFINED_CRT_ORG_CODE
     8                          	defc	DEFINED_CRT_ORG_CODE = 1
     9                          	defc CRT_ORG_CODE = 40960
    10                          	IFNDEF CRT_ORG_CODE
    11                          	ENDIF
    12                          ENDIF
    13                          
    14                          
    15                          IF !DEFINED_REGISTER_SP
    16                          	defc	DEFINED_REGISTER_SP = 1
    17                          	defc REGISTER_SP = 57343
    18                          	IFNDEF REGISTER_SP
    19                          	ENDIF
    20                          ENDIF
    21                          
    22                          
    23                          IF !DEFINED_CLIB_FOPEN_MAX
    24                          	defc	DEFINED_CLIB_FOPEN_MAX = 1
    25                          	defc CLIB_FOPEN_MAX = 0
    26                          	IFNDEF CLIB_FOPEN_MAX
    27                          	ENDIF
    28                          ENDIF
    29                          
    30                          
    31                          IF !DEFINED_CRT_ON_EXIT
    32                          	defc	DEFINED_CRT_ON_EXIT = 1
    33                          	defc CRT_ON_EXIT = 65538
    34                          	IFNDEF CRT_ON_EXIT
    35                          	ENDIF
    36                          ENDIF
    37                          
    38                          
    39                          IF !DEFINED_CRT_ENABLE_EIDI
    40                          	defc	DEFINED_CRT_ENABLE_EIDI = 1
    41                          	defc CRT_ENABLE_EIDI = 34
    42                          	IFNDEF CRT_ENABLE_EIDI
    43                          	ENDIF
    44                          ENDIF
    45                          
    46                          
    47                          IF !DEFINED_CRT_INCLUDE_PREAMBLE
    48                          	defc	DEFINED_CRT_INCLUDE_PREAMBLE = 1
    49                          	defc CRT_INCLUDE_PREAMBLE = 1
    50                          	IFNDEF CRT_INCLUDE_PREAMBLE
    51                          	ENDIF
    52                          ENDIF
    53                          
    54                          
    55                          IF !DEFINED_startup
    56                          	defc	DEFINED_startup = 1
    57                          	defc startup = 0
    58                          	IFNDEF startup
    59                          	ENDIF
    60                          ENDIF
    61                          
    62                          
    63                          
    64                          
    65                          
    66                          
    67                          IFNDEF startup
    68                          
    69                             ; startup undefined so select a default
    70                          
    71                             defc startup = 0
    72                          
    73                          ENDIF
    74                          
    75                          
    76                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    77                          ;; user supplied crt ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    78                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    79                          
    80                          
    81                          
    82                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    83                          ;; ram model ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    84                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    85                          
    86                          
    87                             ; generic embedded system
    88                             ; no files, no fds
    89                          
    90                             IFNDEF __CRTCFG
    91                          
    92                                defc __CRTCFG = 0
    93                          
    94                             ENDIF
    95                          
    96                             IFNDEF __MMAP
    97                          
    98                                defc __MMAP = 0
    99                          
   100                             ENDIF
   101                          
   102                          
   103                          
   104                          
   105                          
   106                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   107                          ;;                   z80 standalone target                   ;;
   108                          ;;    generated from target/z80/startup/z80_crt_0.asm.m4     ;;
   109                          ;;                                                           ;;
   110                          ;;                  flat 64k address space                   ;;
   111                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   112                          
   113                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   114                          ;; GLOBAL SYMBOLS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   115                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   116                          
   117                          include "config_z80_public.inc"
/opt/z88dk/lib/config/../../libsrc/_DEVELOPMENT/target/z80/config_z80_public.inc:
     1                          
     2                          
     3                          
     4                          
     5                          IFNDEF __CONFIG_Z88DK_INC_
     6                          defc   __CONFIG_Z88DK_INC_ = 1
     7                          
     8                          ; Automatically Generated at Library Build Time
     9                          
    10                          
    11                          
    12                          
    13                          
    14                          
    15                          
    16                          
    17                          
    18                          
    19                          PUBLIC __Z88DK
    20                          
    21                          
    22                          
    23                          
    24                          defc __Z88DK = 2300
    25                          
    26                          
    27                          
    28                          
    29                          
    30                          
    31                          
    32                          
    33                          
    34                          PUBLIC __EMBEDDED_Z80
    35                          
    36                          
    37                          
    38                          
    39                          defc __EMBEDDED_Z80 = 1
    40                          
    41                          
    42                          
    43                          
    44                          
    45                          
    46                          
    47                          
    48                          
    49                          PUBLIC __Z80
    50                          
    51                          PUBLIC __Z80_NMOS
    52                          PUBLIC __Z80_CMOS
    53                          
    54                          PUBLIC __CPU_CLOCK
    55                          
    56                          PUBLIC __CPU_INFO
    57                          
    58                          PUBLIC __CPU_INFO_ENABLE_SLL
    59                          
    60                          
    61                          
    62                          
    63                          defc __Z80 = 0x01
    64                          
    65                          defc __Z80_NMOS = 0x01
    66                          defc __Z80_CMOS = 0x02
    67                          
    68                          defc __CPU_CLOCK = 4000000
    69                          
    70                          defc __CPU_INFO = 0x00
    71                          
    72                          defc __CPU_INFO_ENABLE_SLL = 0x01
    73                          
    74                          
    75                          
    76                          
    77                          
    78                          
    79                          
    80                          
    81                          
    82                          PUBLIC __CLIB_OPT_MULTITHREAD
    83                          
    84                          PUBLIC __CLIB_OPT_MULTITHREAD_LOCK_HEAPS
    85                          PUBLIC __CLIB_OPT_MULTITHREAD_LOCK_FILES
    86                          PUBLIC __CLIB_OPT_MULTITHREAD_LOCK_FLIST
    87                          PUBLIC __CLIB_OPT_MULTITHREAD_LOCK_FDTBL
    88                          PUBLIC __CLIB_OPT_MULTITHREAD_LOCK_FDSTR
    89                          
    90                          PUBLIC __CLIB_OPT_IMATH
    91                          
    92                          PUBLIC __CLIB_OPT_IMATH_FAST
    93                          
    94                          PUBLIC __CLIB_OPT_IMATH_FAST_DIV_UNROLL
    95                          PUBLIC __CLIB_OPT_IMATH_FAST_DIV_LZEROS
    96                          PUBLIC __CLIB_OPT_IMATH_FAST_MUL_UNROLL
    97                          PUBLIC __CLIB_OPT_IMATH_FAST_MUL_LZEROS
    98                          PUBLIC __CLIB_OPT_IMATH_FAST_LIA
    99                          
   100                          PUBLIC __CLIB_OPT_IMATH_SELECT
   101                          
   102                          PUBLIC __CLIB_OPT_IMATH_SELECT_FAST_ASR
   103                          PUBLIC __CLIB_OPT_IMATH_SELECT_FAST_LSR
   104                          PUBLIC __CLIB_OPT_IMATH_SELECT_FAST_LSL
   105                          
   106                          PUBLIC __CLIB_OPT_TXT2NUM
   107                          
   108                          PUBLIC __CLIB_OPT_TXT2NUM_INT_BIN
   109                          PUBLIC __CLIB_OPT_TXT2NUM_INT_OCT
   110                          PUBLIC __CLIB_OPT_TXT2NUM_INT_DEC
   111                          PUBLIC __CLIB_OPT_TXT2NUM_INT_HEX
   112                          
   113                          PUBLIC __CLIB_OPT_TXT2NUM_LONG_BIN
   114                          PUBLIC __CLIB_OPT_TXT2NUM_LONG_OCT
   115                          PUBLIC __CLIB_OPT_TXT2NUM_LONG_DEC
   116                          PUBLIC __CLIB_OPT_TXT2NUM_LONG_HEX
   117                          
   118                          PUBLIC __CLIB_OPT_TXT2NUM_SELECT
   119                          
   120                          PUBLIC __CLIB_OPT_TXT2NUM_SELECT_FAST_BIN
   121                          PUBLIC __CLIB_OPT_TXT2NUM_SELECT_FAST_OCT
   122                          PUBLIC __CLIB_OPT_TXT2NUM_SELECT_FAST_DEC
   123                          PUBLIC __CLIB_OPT_TXT2NUM_SELECT_FAST_HEX
   124                          
   125                          PUBLIC __CLIB_OPT_NUM2TXT
   126                          
   127                          PUBLIC __CLIB_OPT_NUM2TXT_INT_BIN
   128                          PUBLIC __CLIB_OPT_NUM2TXT_INT_OCT
   129                          PUBLIC __CLIB_OPT_NUM2TXT_INT_DEC
   130                          PUBLIC __CLIB_OPT_NUM2TXT_INT_HEX
   131                          
   132                          PUBLIC __CLIB_OPT_NUM2TXT_LONG_BIN
   133                          PUBLIC __CLIB_OPT_NUM2TXT_LONG_OCT
   134                          PUBLIC __CLIB_OPT_NUM2TXT_LONG_DEC
   135                          PUBLIC __CLIB_OPT_NUM2TXT_LONG_HEX
   136                          
   137                          PUBLIC __CLIB_OPT_NUM2TXT_SELECT
   138                          
   139                          PUBLIC __CLIB_OPT_NUM2TXT_SELECT_FAST_BIN
   140                          PUBLIC __CLIB_OPT_NUM2TXT_SELECT_FAST_OCT
   141                          PUBLIC __CLIB_OPT_NUM2TXT_SELECT_FAST_DEC
   142                          PUBLIC __CLIB_OPT_NUM2TXT_SELECT_FAST_HEX
   143                          
   144                          PUBLIC __CLIB_OPT_STDIO
   145                          
   146                          PUBLIC __CLIB_OPT_STDIO_VALID
   147                          
   148                          PUBLIC CHAR_CR
   149                          PUBLIC CHAR_LF
   150                          PUBLIC CHAR_BS
   151                          PUBLIC CHAR_ESC
   152                          PUBLIC CHAR_CAPS
   153                          PUBLIC CHAR_BELL
   154                          PUBLIC CHAR_CTRL_C
   155                          PUBLIC CHAR_CTRL_D
   156                          PUBLIC CHAR_CTRL_Z
   157                          PUBLIC CHAR_CURSOR_UC
   158                          PUBLIC CHAR_CURSOR_LC
   159                          PUBLIC CHAR_PASSWORD
   160                          
   161                          PUBLIC __CLIB_OPT_PRINTF
   162                          
   163                          PUBLIC __CLIB_OPT_PRINTF_d
   164                          PUBLIC __CLIB_OPT_PRINTF_u
   165                          PUBLIC __CLIB_OPT_PRINTF_x
   166                          PUBLIC __CLIB_OPT_PRINTF_X
   167                          PUBLIC __CLIB_OPT_PRINTF_o
   168                          PUBLIC __CLIB_OPT_PRINTF_n
   169                          PUBLIC __CLIB_OPT_PRINTF_i
   170                          PUBLIC __CLIB_OPT_PRINTF_p
   171                          PUBLIC __CLIB_OPT_PRINTF_B
   172                          PUBLIC __CLIB_OPT_PRINTF_s
   173                          PUBLIC __CLIB_OPT_PRINTF_c
   174                          PUBLIC __CLIB_OPT_PRINTF_I
   175                          PUBLIC __CLIB_OPT_PRINTF_ld
   176                          PUBLIC __CLIB_OPT_PRINTF_lu
   177                          PUBLIC __CLIB_OPT_PRINTF_lx
   178                          PUBLIC __CLIB_OPT_PRINTF_lX
   179                          PUBLIC __CLIB_OPT_PRINTF_lo
   180                          PUBLIC __CLIB_OPT_PRINTF_ln
   181                          PUBLIC __CLIB_OPT_PRINTF_li
   182                          PUBLIC __CLIB_OPT_PRINTF_lp
   183                          PUBLIC __CLIB_OPT_PRINTF_lB
   184                          PUBLIC __CLIB_OPT_PRINTF_a
   185                          PUBLIC __CLIB_OPT_PRINTF_A
   186                          PUBLIC __CLIB_OPT_PRINTF_e
   187                          PUBLIC __CLIB_OPT_PRINTF_E
   188                          PUBLIC __CLIB_OPT_PRINTF_f
   189                          PUBLIC __CLIB_OPT_PRINTF_F
   190                          PUBLIC __CLIB_OPT_PRINTF_g
   191                          PUBLIC __CLIB_OPT_PRINTF_G
   192                          
   193                          PUBLIC __CLIB_OPT_PRINTF_2
   194                          
   195                          PUBLIC __CLIB_OPT_PRINTF_2_lld
   196                          PUBLIC __CLIB_OPT_PRINTF_2_llu
   197                          PUBLIC __CLIB_OPT_PRINTF_2_llx
   198                          PUBLIC __CLIB_OPT_PRINTF_2_llX
   199                          PUBLIC __CLIB_OPT_PRINTF_2_llo
   200                          PUBLIC __CLIB_OPT_PRINTF_2_lli
   201                          
   202                          PUBLIC __CLIB_OPT_SCANF
   203                          
   204                          PUBLIC __CLIB_OPT_SCANF_d
   205                          PUBLIC __CLIB_OPT_SCANF_u
   206                          PUBLIC __CLIB_OPT_SCANF_x
   207                          PUBLIC __CLIB_OPT_SCANF_X
   208                          PUBLIC __CLIB_OPT_SCANF_o
   209                          PUBLIC __CLIB_OPT_SCANF_n
   210                          PUBLIC __CLIB_OPT_SCANF_i
   211                          PUBLIC __CLIB_OPT_SCANF_p
   212                          PUBLIC __CLIB_OPT_SCANF_B
   213                          PUBLIC __CLIB_OPT_SCANF_s
   214                          PUBLIC __CLIB_OPT_SCANF_c
   215                          PUBLIC __CLIB_OPT_SCANF_I
   216                          PUBLIC __CLIB_OPT_SCANF_ld
   217                          PUBLIC __CLIB_OPT_SCANF_lu
   218                          PUBLIC __CLIB_OPT_SCANF_lx
   219                          PUBLIC __CLIB_OPT_SCANF_lX
   220                          PUBLIC __CLIB_OPT_SCANF_lo
   221                          PUBLIC __CLIB_OPT_SCANF_ln
   222                          PUBLIC __CLIB_OPT_SCANF_li
   223                          PUBLIC __CLIB_OPT_SCANF_lp
   224                          PUBLIC __CLIB_OPT_SCANF_lB
   225                          PUBLIC __CLIB_OPT_SCANF_BRACKET
   226                          PUBLIC __CLIB_OPT_SCANF_a
   227                          PUBLIC __CLIB_OPT_SCANF_A
   228                          PUBLIC __CLIB_OPT_SCANF_e
   229                          PUBLIC __CLIB_OPT_SCANF_E
   230                          PUBLIC __CLIB_OPT_SCANF_f
   231                          PUBLIC __CLIB_OPT_SCANF_F
   232                          PUBLIC __CLIB_OPT_SCANF_g
   233                          PUBLIC __CLIB_OPT_SCANF_G
   234                          
   235                          PUBLIC __CLIB_OPT_SCANF_2
   236                          
   237                          PUBLIC __CLIB_OPT_SCANF_2_lld
   238                          PUBLIC __CLIB_OPT_SCANF_2_llu
   239                          PUBLIC __CLIB_OPT_SCANF_2_llx
   240                          PUBLIC __CLIB_OPT_SCANF_2_llX
   241                          PUBLIC __CLIB_OPT_SCANF_2_llo
   242                          PUBLIC __CLIB_OPT_SCANF_2_lli
   243                          
   244                          PUBLIC __CLIB_OPT_UNROLL
   245                          
   246                          PUBLIC __CLIB_OPT_UNROLL_MEMCPY
   247                          PUBLIC __CLIB_OPT_UNROLL_MEMSET
   248                          PUBLIC __CLIB_OPT_UNROLL_OTIR
   249                          PUBLIC __CLIB_OPT_UNROLL_LDIR
   250                          PUBLIC __CLIB_OPT_UNROLL_USER_SMC
   251                          PUBLIC __CLIB_OPT_UNROLL_LIB_SMC
   252                          
   253                          PUBLIC __CLIB_OPT_STRTOD
   254                          
   255                          PUBLIC __CLIB_OPT_STRTOD_NAN
   256                          PUBLIC __CLIB_OPT_STRTOD_INF
   257                          PUBLIC __CLIB_OPT_STRTOD_HEX
   258                          
   259                          PUBLIC __CLIB_OPT_SORT
   260                          
   261                          PUBLIC __CLIB_OPT_SORT_INSERTION
   262                          PUBLIC __CLIB_OPT_SORT_SHELL
   263                          PUBLIC __CLIB_OPT_SORT_QUICK
   264                          
   265                          PUBLIC __CLIB_OPT_SORT_QSORT
   266                          
   267                          PUBLIC __CLIB_OPT_SORT_QSORT_PIVOT
   268                          PUBLIC __CLIB_OPT_SORT_QSORT_PIVOT_MID
   269                          PUBLIC __CLIB_OPT_SORT_QSORT_PIVOT_RAN
   270                          PUBLIC __CLIB_OPT_SORT_QSORT_ENABLE_INSERTION
   271                          PUBLIC __CLIB_OPT_SORT_QSORT_ENABLE_EQUAL
   272                          
   273                          PUBLIC __CLIB_OPT_ERROR
   274                          
   275                          PUBLIC __CLIB_OPT_ERROR_ENABLED
   276                          PUBLIC __CLIB_OPT_ERROR_VERBOSE
   277                          
   278                          
   279                          
   280                          
   281                          defc __CLIB_OPT_MULTITHREAD = 0x00
   282                          
   283                          defc __CLIB_OPT_MULTITHREAD_LOCK_HEAPS = 0x01
   284                          defc __CLIB_OPT_MULTITHREAD_LOCK_FILES = 0x02
   285                          defc __CLIB_OPT_MULTITHREAD_LOCK_FLIST = 0x04
   286                          defc __CLIB_OPT_MULTITHREAD_LOCK_FDTBL = 0x08
   287                          defc __CLIB_OPT_MULTITHREAD_LOCK_FDSTR = 0x10
   288                          
   289                          defc __CLIB_OPT_IMATH = 0
   290                          
   291                          defc __CLIB_OPT_IMATH_FAST = 0x0f
   292                          
   293                          defc __CLIB_OPT_IMATH_FAST_DIV_UNROLL = 0x01
   294                          defc __CLIB_OPT_IMATH_FAST_DIV_LZEROS = 0x02
   295                          defc __CLIB_OPT_IMATH_FAST_MUL_UNROLL = 0x04
   296                          defc __CLIB_OPT_IMATH_FAST_MUL_LZEROS = 0x08
   297                          defc __CLIB_OPT_IMATH_FAST_LIA = 0x80
   298                          
   299                          defc __CLIB_OPT_IMATH_SELECT = 0x00
   300                          
   301                          defc __CLIB_OPT_IMATH_SELECT_FAST_ASR = 0x01
   302                          defc __CLIB_OPT_IMATH_SELECT_FAST_LSR = 0x02
   303                          defc __CLIB_OPT_IMATH_SELECT_FAST_LSL = 0x04
   304                          
   305                          defc __CLIB_OPT_TXT2NUM = 0x04
   306                          
   307                          defc __CLIB_OPT_TXT2NUM_INT_BIN = 0x01
   308                          defc __CLIB_OPT_TXT2NUM_INT_OCT = 0x02
   309                          defc __CLIB_OPT_TXT2NUM_INT_DEC = 0x04
   310                          defc __CLIB_OPT_TXT2NUM_INT_HEX = 0x08
   311                          
   312                          defc __CLIB_OPT_TXT2NUM_LONG_BIN = 0x10
   313                          defc __CLIB_OPT_TXT2NUM_LONG_OCT = 0x20
   314                          defc __CLIB_OPT_TXT2NUM_LONG_DEC = 0x40
   315                          defc __CLIB_OPT_TXT2NUM_LONG_HEX = 0x80
   316                          
   317                          defc __CLIB_OPT_TXT2NUM_SELECT = 0x00
   318                          
   319                          defc __CLIB_OPT_TXT2NUM_SELECT_FAST_BIN = 0x01
   320                          defc __CLIB_OPT_TXT2NUM_SELECT_FAST_OCT = 0x02
   321                          defc __CLIB_OPT_TXT2NUM_SELECT_FAST_DEC = 0x04
   322                          defc __CLIB_OPT_TXT2NUM_SELECT_FAST_HEX = 0x08
   323                          
   324                          defc __CLIB_OPT_NUM2TXT = 0x00
   325                          
   326                          defc __CLIB_OPT_NUM2TXT_INT_BIN = 0x01
   327                          defc __CLIB_OPT_NUM2TXT_INT_OCT = 0x02
   328                          defc __CLIB_OPT_NUM2TXT_INT_DEC = 0x04
   329                          defc __CLIB_OPT_NUM2TXT_INT_HEX = 0x08
   330                          
   331                          defc __CLIB_OPT_NUM2TXT_LONG_BIN = 0x10
   332                          defc __CLIB_OPT_NUM2TXT_LONG_OCT = 0x20
   333                          defc __CLIB_OPT_NUM2TXT_LONG_DEC = 0x40
   334                          defc __CLIB_OPT_NUM2TXT_LONG_HEX = 0x80
   335                          
   336                          defc __CLIB_OPT_NUM2TXT_SELECT = 0x00
   337                          
   338                          defc __CLIB_OPT_NUM2TXT_SELECT_FAST_BIN = 0x01
   339                          defc __CLIB_OPT_NUM2TXT_SELECT_FAST_OCT = 0x02
   340                          defc __CLIB_OPT_NUM2TXT_SELECT_FAST_DEC = 0x04
   341                          defc __CLIB_OPT_NUM2TXT_SELECT_FAST_HEX = 0x08
   342                          
   343                          defc __CLIB_OPT_STDIO = 0x00
   344                          
   345                          defc __CLIB_OPT_STDIO_VALID = 0x01
   346                          
   347                          defc CHAR_CR = 13
   348                          defc CHAR_LF = 10
   349                          defc CHAR_BS = 12
   350                          defc CHAR_ESC = 27
   351                          defc CHAR_CAPS = 6
   352                          defc CHAR_BELL = 7
   353                          defc CHAR_CTRL_C = 3
   354                          defc CHAR_CTRL_D = 4
   355                          defc CHAR_CTRL_Z = 26
   356                          defc CHAR_CURSOR_UC = 45
   357                          defc CHAR_CURSOR_LC = 95
   358                          defc CHAR_PASSWORD = 42
   359                          
   360                          defc __CLIB_OPT_PRINTF = 0x002ff6ff
   361                          
   362                          defc __CLIB_OPT_PRINTF_d = 0x00000001
   363                          defc __CLIB_OPT_PRINTF_u = 0x00000002
   364                          defc __CLIB_OPT_PRINTF_x = 0x00000004
   365                          defc __CLIB_OPT_PRINTF_X = 0x00000008
   366                          defc __CLIB_OPT_PRINTF_o = 0x00000010
   367                          defc __CLIB_OPT_PRINTF_n = 0x00000020
   368                          defc __CLIB_OPT_PRINTF_i = 0x00000040
   369                          defc __CLIB_OPT_PRINTF_p = 0x00000080
   370                          defc __CLIB_OPT_PRINTF_B = 0x00000100
   371                          defc __CLIB_OPT_PRINTF_s = 0x00000200
   372                          defc __CLIB_OPT_PRINTF_c = 0x00000400
   373                          defc __CLIB_OPT_PRINTF_I = 0x00000800
   374                          defc __CLIB_OPT_PRINTF_ld = 0x00001000
   375                          defc __CLIB_OPT_PRINTF_lu = 0x00002000
   376                          defc __CLIB_OPT_PRINTF_lx = 0x00004000
   377                          defc __CLIB_OPT_PRINTF_lX = 0x00008000
   378                          defc __CLIB_OPT_PRINTF_lo = 0x00010000
   379                          defc __CLIB_OPT_PRINTF_ln = 0x00020000
   380                          defc __CLIB_OPT_PRINTF_li = 0x00040000
   381                          defc __CLIB_OPT_PRINTF_lp = 0x00080000
   382                          defc __CLIB_OPT_PRINTF_lB = 0x00100000
   383                          defc __CLIB_OPT_PRINTF_a = 0x00400000
   384                          defc __CLIB_OPT_PRINTF_A = 0x00800000
   385                          defc __CLIB_OPT_PRINTF_e = 0x01000000
   386                          defc __CLIB_OPT_PRINTF_E = 0x02000000
   387                          defc __CLIB_OPT_PRINTF_f = 0x04000000
   388                          defc __CLIB_OPT_PRINTF_F = 0x08000000
   389                          defc __CLIB_OPT_PRINTF_g = 0x10000000
   390                          defc __CLIB_OPT_PRINTF_G = 0x20000000
   391                          
   392                          defc __CLIB_OPT_PRINTF_2 = 0x00
   393                          
   394                          defc __CLIB_OPT_PRINTF_2_lld = 0x01
   395                          defc __CLIB_OPT_PRINTF_2_llu = 0x02
   396                          defc __CLIB_OPT_PRINTF_2_llx = 0x04
   397                          defc __CLIB_OPT_PRINTF_2_llX = 0x08
   398                          defc __CLIB_OPT_PRINTF_2_llo = 0x10
   399                          defc __CLIB_OPT_PRINTF_2_lli = 0x40
   400                          
   401                          defc __CLIB_OPT_SCANF = 0x002ff6ff
   402                          
   403                          defc __CLIB_OPT_SCANF_d = 0x00000001
   404                          defc __CLIB_OPT_SCANF_u = 0x00000002
   405                          defc __CLIB_OPT_SCANF_x = 0x00000004
   406                          defc __CLIB_OPT_SCANF_X = 0x00000008
   407                          defc __CLIB_OPT_SCANF_o = 0x00000010
   408                          defc __CLIB_OPT_SCANF_n = 0x00000020
   409                          defc __CLIB_OPT_SCANF_i = 0x00000040
   410                          defc __CLIB_OPT_SCANF_p = 0x00000080
   411                          defc __CLIB_OPT_SCANF_B = 0x00000100
   412                          defc __CLIB_OPT_SCANF_s = 0x00000200
   413                          defc __CLIB_OPT_SCANF_c = 0x00000400
   414                          defc __CLIB_OPT_SCANF_I = 0x00000800
   415                          defc __CLIB_OPT_SCANF_ld = 0x00001000
   416                          defc __CLIB_OPT_SCANF_lu = 0x00002000
   417                          defc __CLIB_OPT_SCANF_lx = 0x00004000
   418                          defc __CLIB_OPT_SCANF_lX = 0x00008000
   419                          defc __CLIB_OPT_SCANF_lo = 0x00010000
   420                          defc __CLIB_OPT_SCANF_ln = 0x00020000
   421                          defc __CLIB_OPT_SCANF_li = 0x00040000
   422                          defc __CLIB_OPT_SCANF_lp = 0x00080000
   423                          defc __CLIB_OPT_SCANF_lB = 0x00100000
   424                          defc __CLIB_OPT_SCANF_BRACKET = 0x00200000
   425                          defc __CLIB_OPT_SCANF_a = 0x00400000
   426                          defc __CLIB_OPT_SCANF_A = 0x00800000
   427                          defc __CLIB_OPT_SCANF_e = 0x01000000
   428                          defc __CLIB_OPT_SCANF_E = 0x02000000
   429                          defc __CLIB_OPT_SCANF_f = 0x04000000
   430                          defc __CLIB_OPT_SCANF_F = 0x08000000
   431                          defc __CLIB_OPT_SCANF_g = 0x10000000
   432                          defc __CLIB_OPT_SCANF_G = 0x20000000
   433                          
   434                          defc __CLIB_OPT_SCANF_2 = 0x00
   435                          
   436                          defc __CLIB_OPT_SCANF_2_lld = 0x01
   437                          defc __CLIB_OPT_SCANF_2_llu = 0x02
   438                          defc __CLIB_OPT_SCANF_2_llx = 0x04
   439                          defc __CLIB_OPT_SCANF_2_llX = 0x08
   440                          defc __CLIB_OPT_SCANF_2_llo = 0x10
   441                          defc __CLIB_OPT_SCANF_2_lli = 0x40
   442                          
   443                          defc __CLIB_OPT_UNROLL = 0x00
   444                          
   445                          defc __CLIB_OPT_UNROLL_MEMCPY = 0x01
   446                          defc __CLIB_OPT_UNROLL_MEMSET = 0x02
   447                          defc __CLIB_OPT_UNROLL_OTIR = 0x10
   448                          defc __CLIB_OPT_UNROLL_LDIR = 0x20
   449                          defc __CLIB_OPT_UNROLL_USER_SMC = 0x40
   450                          defc __CLIB_OPT_UNROLL_LIB_SMC = 0x80
   451                          
   452                          defc __CLIB_OPT_STRTOD = 0x00
   453                          
   454                          defc __CLIB_OPT_STRTOD_NAN = 0x01
   455                          defc __CLIB_OPT_STRTOD_INF = 0x01
   456                          defc __CLIB_OPT_STRTOD_HEX = 0x02
   457                          
   458                          defc __CLIB_OPT_SORT = 1
   459                          
   460                          defc __CLIB_OPT_SORT_INSERTION = 0
   461                          defc __CLIB_OPT_SORT_SHELL = 1
   462                          defc __CLIB_OPT_SORT_QUICK = 2
   463                          
   464                          defc __CLIB_OPT_SORT_QSORT = 0x0c
   465                          
   466                          defc __CLIB_OPT_SORT_QSORT_PIVOT = 0x3
   467                          defc __CLIB_OPT_SORT_QSORT_PIVOT_MID = 0x0
   468                          defc __CLIB_OPT_SORT_QSORT_PIVOT_RAN = 0x1
   469                          defc __CLIB_OPT_SORT_QSORT_ENABLE_INSERTION = 0x04
   470                          defc __CLIB_OPT_SORT_QSORT_ENABLE_EQUAL = 0x08
   471                          
   472                          defc __CLIB_OPT_ERROR = 0x00
   473                          
   474                          defc __CLIB_OPT_ERROR_ENABLED = 0x01
   475                          defc __CLIB_OPT_ERROR_VERBOSE = 0x02
   476                          
   477                          
   478                          
   479                          
   480                          
   481                          
   482                          
   483                          
   484                          
   485                          
   486                          
   487                          
   488                          
   489                          PUBLIC __EOK
   490                          PUBLIC __EACCES
   491                          PUBLIC __EBADF
   492                          PUBLIC __EBDFD
   493                          PUBLIC __EDOM
   494                          PUBLIC __EFBIG
   495                          PUBLIC __EINVAL
   496                          PUBLIC __EIO
   497                          PUBLIC __EMFILE
   498                          PUBLIC __ENFILE
   499                          PUBLIC __ENOLCK
   500                          PUBLIC __ENOMEM
   501                          PUBLIC __ENOTSUP
   502                          PUBLIC __EOVERFLOW
   503                          PUBLIC __ERANGE
   504                          PUBLIC __ESTAT
   505                          PUBLIC __EAGAIN
   506                          PUBLIC __EWOULDBLOCK
   507                          
   508                          PUBLIC __ERROR_NEXT
   509                          
   510                          PUBLIC STDIO_SEEK_SET
   511                          PUBLIC STDIO_SEEK_CUR
   512                          PUBLIC STDIO_SEEK_END
   513                          
   514                          PUBLIC STDIO_MSG_PUTC
   515                          PUBLIC STDIO_MSG_WRIT
   516                          PUBLIC STDIO_MSG_GETC
   517                          PUBLIC STDIO_MSG_EATC
   518                          PUBLIC STDIO_MSG_READ
   519                          PUBLIC STDIO_MSG_SEEK
   520                          PUBLIC STDIO_MSG_ICTL
   521                          PUBLIC STDIO_MSG_FLSH
   522                          PUBLIC STDIO_MSG_CLOS
   523                          
   524                          PUBLIC ITERM_MSG_GETC
   525                          PUBLIC ITERM_MSG_REJECT
   526                          PUBLIC ITERM_MSG_INTERRUPT
   527                          PUBLIC ITERM_MSG_PUTC
   528                          PUBLIC ITERM_MSG_PRINT_CURSOR
   529                          PUBLIC ITERM_MSG_ERASE_CURSOR
   530                          PUBLIC ITERM_MSG_ERASE_CURSOR_PWD
   531                          PUBLIC ITERM_MSG_BS
   532                          PUBLIC ITERM_MSG_BS_PWD
   533                          PUBLIC ITERM_MSG_READLINE_BEGIN
   534                          PUBLIC ITERM_MSG_READLINE_END
   535                          PUBLIC ITERM_MSG_READLINE_SCROLL_LIMIT
   536                          PUBLIC ITERM_MSG_BELL
   537                          
   538                          PUBLIC __MESSAGE_ITERM_NEXT__
   539                          
   540                          PUBLIC OTERM_MSG_PUTC
   541                          PUBLIC OTERM_MSG_TTY
   542                          PUBLIC OTERM_MSG_FZX_PUTC
   543                          PUBLIC OTERM_MSG_PRINTC
   544                          PUBLIC OTERM_MSG_SCROLL
   545                          PUBLIC OTERM_MSG_SCROLL_LIMIT
   546                          PUBLIC OTERM_MSG_CLS
   547                          PUBLIC OTERM_MSG_PAUSE
   548                          PUBLIC OTERM_MSG_BELL
   549                          PUBLIC OTERM_MSG_PSCROLL
   550                          PUBLIC OTERM_MSG_FZX_GET_XOR_DRAW
   551                          
   552                          PUBLIC __MESSAGE_OTERM_NEXT__
   553                          
   554                          PUBLIC ICHAR_MSG_GETC
   555                          PUBLIC OCHAR_MSG_PUTC_BIN
   556                          PUBLIC OCHAR_MSG_PUTC
   557                          
   558                          PUBLIC __MESSAGE_NEXT__
   559                          
   560                          PUBLIC mtx_plain
   561                          PUBLIC mtx_recursive
   562                          PUBLIC mtx_timed
   563                          
   564                          PUBLIC thrd_success
   565                          PUBLIC thrd_error
   566                          PUBLIC thrd_nomem
   567                          PUBLIC thrd_busy
   568                          PUBLIC thrd_timedout
   569                          
   570                          PUBLIC IOCTL_RESET
   571                          
   572                          PUBLIC IOCTL_ITERM_ECHO
   573                          PUBLIC IOCTL_ITERM_PASS
   574                          PUBLIC IOCTL_ITERM_LINE
   575                          PUBLIC IOCTL_ITERM_COOK
   576                          PUBLIC IOCTL_ITERM_CAPS
   577                          PUBLIC IOCTL_ITERM_CRLF
   578                          PUBLIC IOCTL_ITERM_CURS
   579                          
   580                          PUBLIC IOCTL_ITERM_TIE
   581                          PUBLIC IOCTL_ITERM_GET_EDITBUF
   582                          PUBLIC IOCTL_ITERM_SET_EDITBUF
   583                          
   584                          PUBLIC IOCTL_OTERM_PAGE
   585                          PUBLIC IOCTL_OTERM_PAUSE
   586                          PUBLIC IOCTL_OTERM_COOK
   587                          PUBLIC IOCTL_OTERM_CRLF
   588                          PUBLIC IOCTL_OTERM_CLEAR
   589                          PUBLIC IOCTL_OTERM_SIGNAL
   590                          PUBLIC IOCTL_OTERM_BELL
   591                          
   592                          PUBLIC IOCTL_OTERM_CLS
   593                          PUBLIC IOCTL_OTERM_RESET_SCROLL
   594                          PUBLIC IOCTL_OTERM_GET_WINDOW_COORD
   595                          PUBLIC IOCTL_OTERM_SET_WINDOW_COORD
   596                          PUBLIC IOCTL_OTERM_GET_WINDOW_RECT
   597                          PUBLIC IOCTL_OTERM_SET_WINDOW_RECT
   598                          PUBLIC IOCTL_OTERM_GET_CURSOR_COORD
   599                          PUBLIC IOCTL_OTERM_SET_CURSOR_COORD
   600                          PUBLIC IOCTL_OTERM_GET_OTERM
   601                          PUBLIC IOCTL_OTERM_SCROLL
   602                          PUBLIC IOCTL_OTERM_FONT
   603                          PUBLIC IOCTL_OTERM_SCROLL_LIMIT
   604                          
   605                          PUBLIC IOCTL_OTERM_FZX_GET_PAPER_COORD
   606                          PUBLIC IOCTL_OTERM_FZX_SET_PAPER_COORD
   607                          PUBLIC IOCTL_OTERM_FZX_GET_PAPER_RECT
   608                          PUBLIC IOCTL_OTERM_FZX_SET_PAPER_RECT
   609                          PUBLIC IOCTL_OTERM_FZX_LEFT_MARGIN
   610                          PUBLIC IOCTL_OTERM_FZX_LINE_SPACING
   611                          PUBLIC IOCTL_OTERM_FZX_SPACE_EXPAND
   612                          PUBLIC IOCTL_OTERM_FZX_GET_FZX_STATE
   613                          PUBLIC IOCTL_OTERM_FZX_SET_FZX_STATE
   614                          
   615                          PUBLIC IOCTL_ICHAR_CRLF
   616                          
   617                          PUBLIC IOCTL_OCHAR_CRLF
   618                          
   619                          
   620                          
   621                          
   622                          defc __EOK = 0
   623                          defc __EACCES = 1
   624                          defc __EBADF = 2
   625                          defc __EBDFD = 3
   626                          defc __EDOM = 4
   627                          defc __EFBIG = 5
   628                          defc __EINVAL = 6
   629                          defc __EIO = 7
   630                          defc __EMFILE = 8
   631                          defc __ENFILE = 9
   632                          defc __ENOLCK = 10
   633                          defc __ENOMEM = 11
   634                          defc __ENOTSUP = 12
   635                          defc __EOVERFLOW = 13
   636                          defc __ERANGE = 14
   637                          defc __ESTAT = 15
   638                          defc __EAGAIN = 16
   639                          defc __EWOULDBLOCK = 16
   640                          
   641                          defc __ERROR_NEXT = 50
   642                          
   643                          defc STDIO_SEEK_SET = 0
   644                          defc STDIO_SEEK_CUR = 1
   645                          defc STDIO_SEEK_END = 2
   646                          
   647                          defc STDIO_MSG_PUTC = 1
   648                          defc STDIO_MSG_WRIT = 2
   649                          defc STDIO_MSG_GETC = 3
   650                          defc STDIO_MSG_EATC = 4
   651                          defc STDIO_MSG_READ = 5
   652                          defc STDIO_MSG_SEEK = 6
   653                          defc STDIO_MSG_ICTL = 7
   654                          defc STDIO_MSG_FLSH = 8
   655                          defc STDIO_MSG_CLOS = 9
   656                          
   657                          defc ITERM_MSG_GETC = 15
   658                          defc ITERM_MSG_REJECT = 16
   659                          defc ITERM_MSG_INTERRUPT = 17
   660                          defc ITERM_MSG_PUTC = 18
   661                          defc ITERM_MSG_PRINT_CURSOR = 19
   662                          defc ITERM_MSG_ERASE_CURSOR = 20
   663                          defc ITERM_MSG_ERASE_CURSOR_PWD = 21
   664                          defc ITERM_MSG_BS = 22
   665                          defc ITERM_MSG_BS_PWD = 23
   666                          defc ITERM_MSG_READLINE_BEGIN = 24
   667                          defc ITERM_MSG_READLINE_END = 25
   668                          defc ITERM_MSG_READLINE_SCROLL_LIMIT = 26
   669                          defc ITERM_MSG_BELL = 27
   670                          
   671                          defc __MESSAGE_ITERM_NEXT__ = 28
   672                          
   673                          defc OTERM_MSG_PUTC = 30
   674                          defc OTERM_MSG_TTY = 31
   675                          defc OTERM_MSG_FZX_PUTC = 32
   676                          defc OTERM_MSG_PRINTC = 33
   677                          defc OTERM_MSG_SCROLL = 34
   678                          defc OTERM_MSG_SCROLL_LIMIT = 35
   679                          defc OTERM_MSG_CLS = 36
   680                          defc OTERM_MSG_PAUSE = 37
   681                          defc OTERM_MSG_BELL = 38
   682                          defc OTERM_MSG_PSCROLL = 39
   683                          defc OTERM_MSG_FZX_GET_XOR_DRAW = 40
   684                          
   685                          defc __MESSAGE_OTERM_NEXT__ = 41
   686                          
   687                          defc ICHAR_MSG_GETC = 15
   688                          defc OCHAR_MSG_PUTC_BIN = 30
   689                          defc OCHAR_MSG_PUTC = 33
   690                          
   691                          defc __MESSAGE_NEXT__ = 45
   692                          
   693                          defc mtx_plain = 0x01
   694                          defc mtx_recursive = 0x02
   695                          defc mtx_timed = 0x04
   696                          
   697                          defc thrd_success = 0x00
   698                          defc thrd_error = 0x01
   699                          defc thrd_nomem = 0x02
   700                          defc thrd_busy = 0x04
   701                          defc thrd_timedout = 0x08
   702                          
   703                          defc IOCTL_RESET = 0x0000
   704                          
   705                          defc IOCTL_ITERM_ECHO = 0xc081
   706                          defc IOCTL_ITERM_PASS = 0xc041
   707                          defc IOCTL_ITERM_LINE = 0xc021
   708                          defc IOCTL_ITERM_COOK = 0xc011
   709                          defc IOCTL_ITERM_CAPS = 0xc009
   710                          defc IOCTL_ITERM_CRLF = 0xc101
   711                          defc IOCTL_ITERM_CURS = 0xc201
   712                          
   713                          defc IOCTL_ITERM_TIE = 0x0201
   714                          defc IOCTL_ITERM_GET_EDITBUF = 0x0381
   715                          defc IOCTL_ITERM_SET_EDITBUF = 0x0301
   716                          
   717                          defc IOCTL_OTERM_PAGE = 0xc082
   718                          defc IOCTL_OTERM_PAUSE = 0xc042
   719                          defc IOCTL_OTERM_COOK = 0xc022
   720                          defc IOCTL_OTERM_CRLF = 0xc012
   721                          defc IOCTL_OTERM_CLEAR = 0xe002
   722                          defc IOCTL_OTERM_SIGNAL = 0xc202
   723                          defc IOCTL_OTERM_BELL = 0xc102
   724                          
   725                          defc IOCTL_OTERM_CLS = 0x0102
   726                          defc IOCTL_OTERM_RESET_SCROLL = 0x0202
   727                          defc IOCTL_OTERM_GET_WINDOW_COORD = 0x0382
   728                          defc IOCTL_OTERM_SET_WINDOW_COORD = 0x0302
   729                          defc IOCTL_OTERM_GET_WINDOW_RECT = 0x0482
   730                          defc IOCTL_OTERM_SET_WINDOW_RECT = 0x0402
   731                          defc IOCTL_OTERM_GET_CURSOR_COORD = 0x0582
   732                          defc IOCTL_OTERM_SET_CURSOR_COORD = 0x0502
   733                          defc IOCTL_OTERM_GET_OTERM = 0x0602
   734                          defc IOCTL_OTERM_SCROLL = 0x0702
   735                          defc IOCTL_OTERM_FONT = 0x0802
   736                          defc IOCTL_OTERM_SCROLL_LIMIT = 0x0902
   737                          
   738                          defc IOCTL_OTERM_FZX_GET_PAPER_COORD = 0x0a82
   739                          defc IOCTL_OTERM_FZX_SET_PAPER_COORD = 0x0a02
   740                          defc IOCTL_OTERM_FZX_GET_PAPER_RECT = 0x0b82
   741                          defc IOCTL_OTERM_FZX_SET_PAPER_RECT = 0x0b02
   742                          defc IOCTL_OTERM_FZX_LEFT_MARGIN = 0x0c02
   743                          defc IOCTL_OTERM_FZX_LINE_SPACING = 0x0d02
   744                          defc IOCTL_OTERM_FZX_SPACE_EXPAND = 0x0e02
   745                          defc IOCTL_OTERM_FZX_GET_FZX_STATE = 0x0f82
   746                          defc IOCTL_OTERM_FZX_SET_FZX_STATE = 0x0f02
   747                          
   748                          defc IOCTL_ICHAR_CRLF = 0xc103
   749                          
   750                          defc IOCTL_OCHAR_CRLF = 0xc014
   751                          
   752                          
   753                          
   754                          
   755                          
   756                          
   757                          
   758                          
   759                          
   760                          
   761                          
   762                          
   763                          
   764                          
   765                          
   766                          
   767                          
   768                          
   769                          
   770                          
   771                          
   772                          
   773                          
   774                          
   775                          
   776                          
   777                          
   778                          
   779                          ENDIF
   780                          
   781                          
/opt/z88dk/lib/config//../..//libsrc/_DEVELOPMENT/target/z80/z80_crt.asm.m4:
   118                          
   119                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   120                          ;; CRT AND CLIB CONFIGURATION ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   121                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   122                          
   123                          include "../crt_defaults.inc"
/opt/z88dk/lib/config/../../libsrc/_DEVELOPMENT/target/z80/../crt_defaults.inc:
     1                          
     2                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     3                          ;; crt defaults ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     4                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     5                          
     6                             ; crt configuration
     7                          
     8                             defc DEF__crt_org_code              = 0       ;; org of code section
     9                             defc DEF__crt_org_data              = 0       ;; org of data section (0 or -1 means follow code, -1 means generate separate binary)
    10                             defc DEF__crt_org_bss               = 0       ;; org of bss section (0 or -1 means follow data, -1 means generate separate binary)
    11                          
    12                             defc DEF__crt_model                 = 0       ;; 0 = ram model, 1 = rom model, 2 = compressed rom model
    13                             defc DEF__crt_enforce_snames        = 3       ;; bit 0 set = enforce BSS name, bit 1 set = enforce DATA name
    14                          
    15                             defc DEF__register_sp               = 0       ;; initial value of sp (-1 = do not modify (some targets may redefine meaning), 0 = top of memory)
    16                             defc DEF__crt_stack_size            = 512     ;; minimum size reserved for stack when automatically allocating memory for the malloc heap
    17                          
    18                             defc DEF__crt_initialize_bss        = 0       ;; generate code to initialize bss section at startup
    19                          
    20                             defc DEF__crt_include_preamble      = 0       ;; if non-zero, user supplies code in file "crt_preamble.asm" that is inserted at the start of the binary
    21                          
    22                             defc DEF__crt_org_vector_table      = 0       ;; if negative and Z88DK supplies page zero code, creates a section "code_vector" aligned to a page boundary to hold int vectors
    23                             defc DEF__crt_io_vector_base        = 0       ;; io vector base address for z180 internal peripherals
    24                             defc DEF__crt_interrupt_mode        = -1      ;; if 0-2 crt inserts appropriate im x instruction
    25                             defc DEF__crt_interrupt_mode_exit   = -1      ;; if 0-2 crt inserts appropriate im x instruction on exit
    26                          
    27                             defc DEF__crt_enable_commandline    = 2       ;; generate argc and argv from command line (targets without command line will get argc=1, argv[0]="", argv[1]=NULL)
    28                             defc DEF__crt_enable_commandline_ex = 0       ;; target specific bits and bits for io redirection and piping
    29                             defc DEF__crt_enable_restart        = 0       ;; if non-zero, restart the program on exit (correct initialization of static variables with rom models only)
    30                             defc DEF__crt_enable_close          = 1       ;; if non-zero, close files on exit
    31                          
    32                             defc DEF__crt_enable_eidi           = 0       ;; bit flags: 0x01 = di on start, 0x02 = ei on start, 0x10 = di on exit, 0x20 = ei on exit
    33                             defc DEF__crt_on_exit               = 0x10001 ;; halt on exit (see documentation for other exit behaviours)
    34                          
    35                             defc DEF__crt_enable_rst            = 0       ;; if non-zero and in some crts with code org = 0, set bits indicate which rst locations are implemented with user code
    36                             defc DEF__crt_enable_nmi            = 0       ;; if non-zero and in some crts with code org = 0, a jump to user code to service the nmi is inserted
    37                             defc DEF__crt_enable_trap           = 0       ;; if non-zero and in some crts with code org = 0 and 8085 or Z180 target, a jump to user code to service traps is inserted
    38                          
    39                             ; clib defaults
    40                          
    41                             defc DEF__clib_exit_stack_size      = 32      ;; max number of functions that can be registered with atexit()
    42                             defc DEF__clib_quickexit_stack_size = 32      ;; max number of functions that can be registered with at_quickexit()
    43                          
    44                             defc DEF__clib_malloc_heap_size     = -1      ;; size of malloc heap (0 = do not create a heap, -1 = automatically place heap between end of bss section and bottom of stack)
    45                             defc DEF__clib_stdio_heap_size      = 256     ;; size of stdio heap (0 = do not allocate bytes for opening of files)
    46                          
    47                             defc DEF__clib_balloc_table_size    = 0       ;; number of queues created for balloc block memory allocator
    48                          
    49                             defc DEF__clib_fopen_max            = 8       ;; max number of FILE*
    50                             defc DEF__clib_open_max             = 8       ;; max number of open files
    51                          
    52                          ;; end crt defaults ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    53                          
/opt/z88dk/lib/config//../..//libsrc/_DEVELOPMENT/target/z80/z80_crt.asm.m4:
   124                          include "crt_config.inc"
/opt/z88dk/lib/config/../../libsrc/_DEVELOPMENT/target/z80/crt_config.inc:
     1                          
     2                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     3                          ;; crt target defaults ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     4                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     5                          
     6                          IF __CRTCFG = -1
     7                          
     8                             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     9                             ;; user supplied crt defaults ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    10                             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    11                          
    12                             INCLUDE "crt_cfg.inc"
    13                          
    14                          ENDIF
    15                          
    16                          IF __CRTCFG = 0
    17                          
    18                             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    19                             ;; embedded ram model ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    20                             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    21                          
    22                             defc TAR__crt_org_code              = 0
    23                             defc TAR__crt_org_data              = 0
    24                             defc TAR__crt_org_bss               = 0
    25                          
    26                             defc TAR__crt_model                 = 0
    27                          
    28                             defc TAR__register_sp               = 0
    29                             defc TAR__crt_stack_size            = 512
    30                          
    31                             defc TAR__crt_initialize_bss        = 0
    32                          
    33                             defc TAR__crt_include_preamble      = 0
    34                          
    35                             defc TAR__crt_org_vector_table      = 0
    36                          
    37                             defc TAR__crt_interrupt_mode        = -1
    38                             defc TAR__crt_interrupt_mode_exit   = -1
    39                          
    40                             defc TAR__crt_enable_commandline    = 0
    41                             defc TAR__crt_enable_commandline_ex = 0
    42                             defc TAR__crt_enable_restart        = 0
    43                             defc TAR__crt_enable_close          = 1
    44                          
    45                             defc TAR__crt_enable_eidi           = 0x13
    46                             defc TAR__crt_on_exit               = 0x10001
    47                          
    48                             defc TAR__crt_enable_rst            = 0
    49                             defc TAR__crt_enable_nmi            = 0
    50                          
    51                             ; clib defaults
    52                          
    53                             defc TAR__clib_exit_stack_size      = 0
    54                             defc TAR__clib_quickexit_stack_size = 0
    55                          
    56                             defc TAR__clib_malloc_heap_size     = -1
    57                             defc TAR__clib_stdio_heap_size      = 128
    58                          
    59                             defc TAR__clib_balloc_table_size    = 0
    60                          
    61                             defc TAR__clib_fopen_max            = 0
    62                             defc TAR__clib_open_max             = 0
    63                          
    64                          ENDIF
    65                          
    66                          IF __CRTCFG = 1
    67                          
    68                             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    69                             ;; embedded rom model ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    70                             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    71                          
    72                             defc TAR__crt_org_code              = 0
    73                             defc TAR__crt_org_data              = 32768
    74                             defc TAR__crt_org_bss               = -1
    75                          
    76                             defc TAR__crt_model                 = 1
    77                          
    78                             defc TAR__register_sp               = 0
    79                             defc TAR__crt_stack_size            = 512
    80                          
    81                             defc TAR__crt_initialize_bss        = 1
    82                          
    83                             defc TAR__crt_include_preamble      = 0
    84                          
    85                             defc TAR__crt_org_vector_table      = 0
    86                          
    87                             defc TAR__crt_interrupt_mode        = -1
    88                             defc TAR__crt_interrupt_mode_exit   = -1
    89                          
    90                             defc TAR__crt_enable_commandline    = 0
    91                             defc TAR__crt_enable_commandline_ex = 0
    92                             defc TAR__crt_enable_restart        = 0
    93                             defc TAR__crt_enable_close          = 1
    94                          
    95                             defc TAR__crt_enable_eidi           = 0x13
    96                             defc TAR__crt_on_exit               = 0x10001
    97                          
    98                             defc TAR__crt_enable_rst            = 0
    99                             defc TAR__crt_enable_nmi            = 0
   100                          
   101                             ; clib defaults
   102                          
   103                             defc TAR__clib_exit_stack_size      = 0
   104                             defc TAR__clib_quickexit_stack_size = 0
   105                          
   106                             defc TAR__clib_malloc_heap_size     = -1
   107                             defc TAR__clib_stdio_heap_size      = 128
   108                          
   109                             defc TAR__clib_balloc_table_size    = 0
   110                          
   111                             defc TAR__clib_fopen_max            = 0
   112                             defc TAR__clib_open_max             = 0
   113                          
   114                          ENDIF
   115                          
   116                          IF __CRTCFG = 2
   117                          
   118                             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   119                             ;; embedded compressed rom model ;;;;;;;;;;;;;;;;;;;;;;;;;;;
   120                             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   121                          
   122                             defc TAR__crt_org_code              = 0
   123                             defc TAR__crt_org_data              = 32768
   124                             defc TAR__crt_org_bss               = -1
   125                          
   126                             defc TAR__crt_model                 = 2
   127                          
   128                             defc TAR__register_sp               = 0
   129                             defc TAR__crt_stack_size            = 512
   130                          
   131                             defc TAR__crt_initialize_bss        = 1
   132                          
   133                             defc TAR__crt_include_preamble      = 0
   134                          
   135                             defc TAR__crt_org_vector_table      = 0
   136                          
   137                             defc TAR__crt_interrupt_mode        = -1
   138                             defc TAR__crt_interrupt_mode_exit   = -1
   139                          
   140                             defc TAR__crt_enable_commandline    = 0
   141                             defc TAR__crt_enable_commandline_ex = 0
   142                             defc TAR__crt_enable_restart        = 0
   143                             defc TAR__crt_enable_close          = 1
   144                          
   145                             defc TAR__crt_enable_eidi           = 0x13
   146                             defc TAR__crt_on_exit               = 0x10001
   147                          
   148                             defc TAR__crt_enable_rst            = 0
   149                             defc TAR__crt_enable_nmi            = 0
   150                          
   151                             ; clib defaults
   152                          
   153                             defc TAR__clib_exit_stack_size      = 0
   154                             defc TAR__clib_quickexit_stack_size = 0
   155                          
   156                             defc TAR__clib_malloc_heap_size     = -1
   157                             defc TAR__clib_stdio_heap_size      = 128
   158                          
   159                             defc TAR__clib_balloc_table_size    = 0
   160                          
   161                             defc TAR__clib_fopen_max            = 0
   162                             defc TAR__clib_open_max             = 0
   163                          
   164                          ENDIF
   165                          
   166                          ;; end crt target defaults ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   167                          
/opt/z88dk/lib/config//../..//libsrc/_DEVELOPMENT/target/z80/z80_crt.asm.m4:
   125                          
   126                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   127                          ;; crt rules ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   128                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   129                          
   130                          
   131                             IFDEF CRT_ORG_CODE
   132                          
   133                                defc __crt_org_code = CRT_ORG_CODE
   134                          
   135                             ELSE
   136                          
   137                                IFDEF TAR__crt_org_code
   138                          
   139                                   defc __crt_org_code = TAR__crt_org_code
   140                          
   141                                ELSE
   142                          
   143                                   defc __crt_org_code = DEF__crt_org_code
   144                          
   145                                ENDIF
   146                          
   147                             ENDIF
   148                          
   149                             IFDEF REGISTER_SP
   150                          
   151                                defc __register_sp = REGISTER_SP
   152                          
   153                             ELSE
   154                          
   155                                IFDEF STACKPTR
   156                          
   157                                   defc __register_sp = STACKPTR
   158                          
   159                                ELSE
   160                          
   161                                   IFDEF TAR__register_sp
   162                          
   163                                      defc __register_sp = TAR__register_sp
   164                          
   165                                   ELSE
   166                          
   167                                      defc __register_sp = DEF__register_sp
   168                          
   169                                   ENDIF
   170                          
   171                                ENDIF
   172                          
   173                             ENDIF
   174                          
   175                          
   176                             IFDEF CRT_STACK_SIZE
   177                          
   178                                defc __crt_stack_size = CRT_STACK_SIZE
   179                          
   180                             ELSE
   181                          
   182                                IFDEF TAR__crt_stack_size
   183                          
   184                                   defc __crt_stack_size = TAR__crt_stack_size
   185                          
   186                                ELSE
   187                          
   188                                   defc __crt_stack_size = DEF__crt_stack_size
   189                          
   190                                ENDIF
   191                          
   192                             ENDIF
   193                          
   194                          
   195                             IFDEF CRT_ORG_DATA
   196                          
   197                                defc __crt_org_data = CRT_ORG_DATA
   198                          
   199                             ELSE
   200                          
   201                                IFDEF TAR__crt_org_data
   202                          
   203                                   defc __crt_org_data = TAR__crt_org_data
   204                          
   205                                ELSE
   206                          
   207                                   defc __crt_org_data = DEF__crt_org_data
   208                          
   209                                ENDIF
   210                          
   211                             ENDIF
   212                          
   213                          
   214                             IFDEF CRT_ORG_BSS
   215                          
   216                                defc __crt_org_bss = CRT_ORG_BSS
   217                          
   218                             ELSE
   219                          
   220                                IFDEF TAR__crt_org_bss
   221                          
   222                                   defc __crt_org_bss = TAR__crt_org_bss
   223                          
   224                                ELSE
   225                          
   226                                   defc __crt_org_bss = DEF__crt_org_bss
   227                          
   228                                ENDIF
   229                          
   230                             ENDIF
   231                          
   232                          
   233                             IFDEF CRT_MODEL
   234                          
   235                                defc __crt_model = CRT_MODEL
   236                          
   237                             ELSE
   238                          
   239                                IFDEF TAR__crt_model
   240                          
   241                                   defc __crt_model = TAR__crt_model
   242                          
   243                                ELSE
   244                          
   245                                   defc __crt_model = DEF__crt_model
   246                          
   247                                ENDIF
   248                          
   249                             ENDIF
   250                          
   251                             IFDEF CRT_INITIALIZE_BSS
   252                          
   253                                defc __crt_initialize_bss = CRT_INITIALIZE_BSS
   254                          
   255                             ELSE
   256                          
   257                                IFDEF TAR__crt_initialize_bss
   258                          
   259                                   defc __crt_initialize_bss = TAR__crt_initialize_bss
   260                          
   261                                ELSE
   262                          
   263                                   defc __crt_initialize_bss = DEF__crt_initialize_bss
   264                          
   265                                ENDIF
   266                          
   267                             ENDIF
   268                          
   269                          
   270                             IFDEF CRT_INCLUDE_PREAMBLE
   271                          
   272                                defc __crt_include_preamble = CRT_INCLUDE_PREAMBLE
   273                          
   274                             ELSE
   275                          
   276                                IFDEF TAR__crt_include_preamble
   277                          
   278                                   defc __crt_include_preamble = TAR__crt_include_preamble
   279                          
   280                                ELSE
   281                          
   282                                   defc __crt_include_preamble = DEF__crt_include_preamble
   283                          
   284                                ENDIF
   285                          
   286                             ENDIF
   287                          
   288                             IFDEF CRT_ORG_VECTOR_TABLE
   289                          
   290                                defc __crt_org_vector_table = CRT_ORG_VECTOR_TABLE
   291                          
   292                             ELSE
   293                          
   294                                IFDEF TAR__crt_org_vector_table
   295                          
   296                                   defc __crt_org_vector_table = TAR__crt_org_vector_table
   297                          
   298                                ELSE
   299                          
   300                                   defc __crt_org_vector_table = DEF__crt_org_vector_table
   301                          
   302                                ENDIF
   303                          
   304                             ENDIF
   305                          
   306                          IF __Z180
   307                          
   308                             IFDEF CRT_IO_VECTOR_BASE
   309                          
   310                                defc __crt_io_vector_base = CRT_IO_VECTOR_BASE
   311                          
   312                             ELSE
   313                          
   314                                IFDEF TAR__crt_io_vector_base
   315                          
   316                                   defc __crt_io_vector_base = TAR__crt_io_vector_base
   317                          
   318                                ELSE
   319                          
   320                                   defc __crt_io_vector_base = DEF__crt_io_vector_base
   321                          
   322                                ENDIF
   323                          
   324                             ENDIF
   325                          
   326                          ENDIF
   327                          
   328                             IFDEF CRT_INTERRUPT_MODE
   329                          
   330                                defc __crt_interrupt_mode = CRT_INTERRUPT_MODE
   331                          
   332                             ELSE
   333                          
   334                                IFDEF TAR__crt_interrupt_mode
   335                          
   336                                   defc __crt_interrupt_mode = TAR__crt_interrupt_mode
   337                          
   338                                ELSE
   339                          
   340                                   defc __crt_interrupt_mode = DEF__crt_interrupt_mode
   341                          
   342                                ENDIF
   343                          
   344                             ENDIF
   345                          
   346                          
   347                             IFDEF CRT_INTERRUPT_MODE_EXIT
   348                          
   349                                defc __crt_interrupt_mode_exit = CRT_INTERRUPT_MODE_EXIT
   350                          
   351                             ELSE
   352                          
   353                                IFDEF TAR__crt_interrupt_mode_exit
   354                          
   355                                   defc __crt_interrupt_mode_exit = TAR__crt_interrupt_mode_exit
   356                          
   357                                ELSE
   358                          
   359                                   defc __crt_interrupt_mode_exit = DEF__crt_interrupt_mode_exit
   360                          
   361                                ENDIF
   362                          
   363                             ENDIF
   364                          
   365                          
   366                             IFDEF CRT_ENABLE_COMMANDLINE
   367                          
   368                                defc __crt_enable_commandline = CRT_ENABLE_COMMANDLINE
   369                          
   370                             ELSE
   371                          
   372                                IFDEF TAR__crt_enable_commandline
   373                          
   374                                   defc __crt_enable_commandline = TAR__crt_enable_commandline
   375                          
   376                                ELSE
   377                          
   378                                   defc __crt_enable_commandline = DEF__crt_enable_commandline
   379                          
   380                                ENDIF
   381                          
   382                             ENDIF
   383                          
   384                          
   385                             IFDEF CRT_ENABLE_COMMANDLINE_EX
   386                          
   387                                defc __crt_enable_commandline_ex = CRT_ENABLE_COMMANDLINE_EX
   388                          
   389                             ELSE
   390                          
   391                                IFDEF TAR__crt_enable_commandline_ex
   392                          
   393                                   defc __crt_enable_commandline_ex = TAR__crt_enable_commandline_ex
   394                          
   395                                ELSE
   396                          
   397                                   defc __crt_enable_commandline_ex = DEF__crt_enable_commandline_ex
   398                          
   399                                ENDIF
   400                          
   401                             ENDIF
   402                          
   403                          
   404                             IFDEF CRT_ENABLE_RESTART
   405                          
   406                                defc __crt_enable_restart = CRT_ENABLE_RESTART
   407                          
   408                             ELSE
   409                          
   410                                IFDEF TAR__crt_enable_restart
   411                          
   412                                   defc __crt_enable_restart = TAR__crt_enable_restart
   413                          
   414                                ELSE
   415                          
   416                                   defc __crt_enable_restart = DEF__crt_enable_restart
   417                          
   418                                ENDIF
   419                          
   420                             ENDIF
   421                          
   422                          
   423                             IFDEF CRT_ENABLE_CLOSE
   424                          
   425                                defc __crt_enable_close = CRT_ENABLE_CLOSE
   426                          
   427                             ELSE
   428                          
   429                                IFDEF TAR__crt_enable_close
   430                          
   431                                   defc __crt_enable_close = TAR__crt_enable_close
   432                          
   433                                ELSE
   434                          
   435                                   defc __crt_enable_close = DEF__crt_enable_close
   436                          
   437                                ENDIF
   438                          
   439                             ENDIF
   440                          
   441                          
   442                             IFDEF CRT_ENABLE_EIDI
   443                          
   444                                defc __crt_enable_eidi = CRT_ENABLE_EIDI
   445                          
   446                             ELSE
   447                          
   448                                IFDEF TAR__crt_enable_eidi
   449                          
   450                                   defc __crt_enable_eidi = TAR__crt_enable_eidi
   451                          
   452                                ELSE
   453                          
   454                                   defc __crt_enable_eidi = DEF__crt_enable_eidi
   455                          
   456                                ENDIF
   457                          
   458                             ENDIF
   459                          
   460                          
   461                             IF __crt_enable_restart
   462                          
   463                                defc __crt_on_exit = 0x10008
   464                          
   465                             ELSE
   466                          
   467                                IFDEF CRT_ON_EXIT
   468                          
   469                                   defc __crt_on_exit = CRT_ON_EXIT
   470                          
   471                                ELSE
   472                          
   473                                   IFDEF TAR__crt_on_exit
   474                          
   475                                      defc __crt_on_exit = TAR__crt_on_exit
   476                          
   477                                   ELSE
   478                          
   479                                      defc __crt_on_exit = DEF__crt_on_exit
   480                          
   481                                   ENDIF
   482                          
   483                                ENDIF
   484                          
   485                             ENDIF
   486                          
   487                          
   488                             IFDEF CLIB_EXIT_STACK_SIZE
   489                          
   490                                defc __clib_exit_stack_size = CLIB_EXIT_STACK_SIZE
   491                          
   492                             ELSE
   493                          
   494                                IFDEF TAR__clib_exit_stack_size
   495                          
   496                                   defc __clib_exit_stack_size = TAR__clib_exit_stack_size
   497                          
   498                                ELSE
   499                          
   500                                   defc __clib_exit_stack_size = DEF__clib_exit_stack_size
   501                          
   502                                ENDIF
   503                          
   504                             ENDIF
   505                          
   506                          
   507                             IFDEF CLIB_QUICKEXIT_STACK_SIZE
   508                          
   509                                defc __clib_quickexit_stack_size = CLIB_QUICKEXIT_STACK_SIZE
   510                          
   511                             ELSE
   512                          
   513                                IFDEF TAR__clib_quickexit_stack_size
   514                          
   515                                   defc __clib_quickexit_stack_size = TAR__clib_quickexit_stack_size
   516                          
   517                                ELSE
   518                          
   519                                   defc __clib_quickexit_stack_size = DEF__clib_quickexit_stack_size
   520                          
   521                                ENDIF
   522                          
   523                             ENDIF
   524                          
   525                          
   526                             IFDEF CLIB_MALLOC_HEAP_SIZE
   527                          
   528                                defc __clib_malloc_heap_size = CLIB_MALLOC_HEAP_SIZE
   529                          
   530                             ELSE
   531                          
   532                                IFDEF TAR__clib_malloc_heap_size
   533                          
   534                                   defc __clib_malloc_heap_size = TAR__clib_malloc_heap_size
   535                          
   536                                ELSE
   537                          
   538                                   defc __clib_malloc_heap_size = DEF__clib_malloc_heap_size
   539                          
   540                                ENDIF
   541                          
   542                             ENDIF
   543                          
   544                          
   545                             IFDEF CLIB_STDIO_HEAP_SIZE
   546                          
   547                                defc __clib_stdio_heap_size = CLIB_STDIO_HEAP_SIZE
   548                          
   549                             ELSE
   550                          
   551                                IFDEF TAR__clib_stdio_heap_size
   552                          
   553                                   defc __clib_stdio_heap_size = TAR__clib_stdio_heap_size
   554                          
   555                                ELSE
   556                          
   557                                   defc __clib_stdio_heap_size = DEF__clib_stdio_heap_size
   558                          
   559                                ENDIF
   560                          
   561                             ENDIF
   562                          
   563                          
   564                             IFDEF CLIB_BALLOC_TABLE_SIZE
   565                          
   566                                defc __clib_balloc_table_size = CLIB_BALLOC_TABLE_SIZE
   567                          
   568                             ELSE
   569                          
   570                                IFDEF TAR__clib_balloc_table_size
   571                          
   572                                   defc __clib_balloc_table_size = TAR__clib_balloc_table_size
   573                          
   574                                ELSE
   575                          
   576                                   defc __clib_balloc_table_size = DEF__clib_balloc_table_size
   577                          
   578                                ENDIF
   579                          
   580                             ENDIF
   581                          
   582                          
   583                             IFDEF CLIB_FOPEN_MAX
   584                          
   585                                defc __clib_fopen_max = CLIB_FOPEN_MAX
   586                          
   587                             ELSE
   588                          
   589                                IFDEF TAR__clib_fopen_max
   590                          
   591                                   defc __clib_fopen_max = TAR__clib_fopen_max
   592                          
   593                                ELSE
   594                          
   595                                   defc __clib_fopen_max = DEF__clib_fopen_max
   596                          
   597                                ENDIF
   598                          
   599                             ENDIF
   600                          
   601                          
   602                             IFDEF CLIB_OPEN_MAX
   603                          
   604                                defc __clib_open_max = CLIB_OPEN_MAX
   605                          
   606                             ELSE
   607                          
   608                                IFDEF TAR__clib_open_max
   609                          
   610                                   defc __clib_open_max = TAR__clib_open_max
   611                          
   612                                ELSE
   613                          
   614                                   defc __clib_open_max = DEF__clib_open_max
   615                          
   616                                ENDIF
   617                          
   618                             ENDIF
   619                          
   620                          
   621                             IFDEF CRT_ENABLE_RST
   622                          
   623                                defc __crt_enable_rst = CRT_ENABLE_RST
   624                          
   625                             ELSE
   626                          
   627                                IFDEF TAR__crt_enable_rst
   628                          
   629                                   defc __crt_enable_rst = TAR__crt_enable_rst
   630                          
   631                                ELSE
   632                          
   633                                   defc __crt_enable_rst = DEF__crt_enable_rst
   634                          
   635                                ENDIF
   636                          
   637                             ENDIF
   638                          
   639                          
   640                             IFDEF CRT_ENABLE_NMI
   641                          
   642                                defc __crt_enable_nmi = CRT_ENABLE_NMI
   643                          
   644                             ELSE
   645                          
   646                                IFDEF TAR__crt_enable_nmi
   647                          
   648                                   defc __crt_enable_nmi = TAR__crt_enable_nmi
   649                          
   650                                ELSE
   651                          
   652                                   defc __crt_enable_nmi = DEF__crt_enable_nmi
   653                          
   654                                ENDIF
   655                          
   656                             ENDIF
   657                          
   658                          
   659                             IFDEF CRT_ENABLE_TRAP
   660                          
   661                                defc __crt_enable_trap = CRT_ENABLE_TRAP
   662                          
   663                             ELSE
   664                          
   665                                IFDEF TAR__crt_enable_trap
   666                          
   667                                   defc __crt_enable_trap = TAR__crt_enable_trap
   668                          
   669                                ELSE
   670                          
   671                                   defc __crt_enable_trap = DEF__crt_enable_trap
   672                          
   673                                ENDIF
   674                          
   675                             ENDIF
   676                          
   677                          IF __8085
   678                          
   679                             IFDEF CRT_ENABLE_INT55
   680                          
   681                                defc __crt_enable_int55 = CRT_ENABLE_INT55
   682                          
   683                             ELSE
   684                          
   685                                IFDEF TAR__crt_enable_int55
   686                          
   687                                   defc __crt_enable_int55 = TAR__crt_enable_int55
   688                          
   689                                ELSE
   690                          
   691                                   defc __crt_enable_int55 = DEF__crt_enable_int55
   692                          
   693                                ENDIF
   694                          
   695                             ENDIF
   696                          
   697                          
   698                             IFDEF CRT_ENABLE_INT65
   699                          
   700                                defc __crt_enable_int65 = CRT_ENABLE_INT65
   701                          
   702                             ELSE
   703                          
   704                                IFDEF TAR__crt_enable_int65
   705                          
   706                                   defc __crt_enable_int65 = TAR__crt_enable_int65
   707                          
   708                                ELSE
   709                          
   710                                   defc __crt_enable_int65 = DEF__crt_enable_int65
   711                          
   712                                ENDIF
   713                          
   714                             ENDIF
   715                          
   716                          
   717                             IFDEF CRT_ENABLE_INT65
   718                          
   719                                defc __crt_enable_int75 = CRT_ENABLE_INT65
   720                          
   721                             ELSE
   722                          
   723                                IFDEF TAR__crt_enable_int75
   724                          
   725                                   defc __crt_enable_int75 = TAR__crt_enable_int75
   726                          
   727                                ELSE
   728                          
   729                                   defc __crt_enable_int75 = DEF__crt_enable_int75
   730                          
   731                                ENDIF
   732                          
   733                             ENDIF
   734                          
   735                          
   736                             IFDEF CRT_ENABLE_RST40H
   737                          
   738                                defc __crt_enable_rst40h = CRT_ENABLE_RST40H
   739                          
   740                             ELSE
   741                          
   742                                IFDEF TAR__crt_enable_rst40h
   743                          
   744                                   defc __crt_enable_rst40h = TAR__crt_enable_rst40h
   745                          
   746                                ELSE
   747                          
   748                                   defc __crt_enable_rst40h = DEF__crt_enable_rst40h
   749                          
   750                                ENDIF
   751                          
   752                             ENDIF
   753                          
   754                          ENDIF
   755                          
   756                             ;; rules that must be processed by m4
   757                          
   758                          
   759                          
   760                             IFNDEF __crt_include_driver_instantiation
   761                                defc __crt_include_driver_instantiation = 0
   762                             ENDIF
   763                          
   764                             ;; public definitions
   765                          
   766                             PUBLIC __clib_fopen_max
   767                             PUBLIC __clib_open_max
   768                          
   769                             PUBLIC __exit_stack_size
   770                             PUBLIC __quickexit_stack_size
   771                          
   772                             defc __exit_stack_size = __clib_exit_stack_size
   773                             defc __quickexit_stack_size = __clib_quickexit_stack_size
   774                          
   775                             IF __Z180
   776                          
   777                                PUBLIC __IO_VECTOR_BASE
   778                          
   779                                IF __crt_io_vector_base < 0
   780                          
   781                                   IF (__crt_org_vector_table < 0)
   782                          
   783                                      IF (-__crt_org_vector_table) & 0x1f
   784                          
   785                                         "Cannot place __IO_VECTOR_BASE at start of interrupt vector table"
   786                          
   787                                      ELSE
   788                          
   789                                         defc __IO_VECTOR_BASE = (-__crt_org_vector_table) & 0xe0
   790                          
   791                                      ENDIF
   792                          
   793                                   ELSE
   794                          
   795                                      IF __crt_org_vector_table & 0x1f
   796                          
   797                                         "Cannot place __IO_VECTOR_BASE at start of interrupt vector table"
   798                          
   799                                      ELSE
   800                          
   801                                         defc __IO_VECTOR_BASE = __crt_org_vector_table & 0xe0
   802                          
   803                                      ENDIF
   804                          
   805                                   ENDIF
   806                          
   807                                ELSE
   808                          
   809                                   IF __crt_io_vector_base & 0x1f
   810                          
   811                                      "Illegal __IO_VECTOR_BASE"
   812                          
   813                                   ELSE
   814                          
   815                                      defc __IO_VECTOR_BASE = __crt_io_vector_base & 0xe0
   816                          
   817                                   ENDIF
   818                          
   819                                ENDIF
   820                          
   821                             ENDIF
   822                          
   823                          ;; end crt rules ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   824                          
   825                          
   826                          
   827                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   828                          ;; SET UP MEMORY MAP ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   829                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   830                          
   831                          
   832                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   833                          ;; memory map ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   834                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   835                          
   836                          IF __MMAP = -1
   837                          
   838                             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   839                             ;; user supplied memory map ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   840                             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   841                          
   842                          
   843                          
   844                             SECTION UNASSIGNED
   845                             org 0
   846                          
   847                          ENDIF
   848                          
   849                          IF __MMAP = 0
   850                          
   851                             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   852                             ;; standard CODE/DATA/BSS memory map ;;;;;;;;;;;;;;;;;;;;;;;
   853                             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   854                          
   855                             INCLUDE "../crt_memory_model_z80.inc"
/opt/z88dk/lib/config/../../libsrc/_DEVELOPMENT/target/z80/../crt_memory_model_z80.inc:
     1                          
     2                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     3                          ;; memory model ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     4                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     5                          
     6                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     7                          
     8                          SECTION CODE
     9                          
    10                          org __crt_org_code
    11                          
    12                          IF (__crt_org_vector_table = -0x80) || (__crt_org_vector_table = -0x100)
    13                          
    14                          section code_crt_interrupt_vector_table
    15                          section code_crt_start
    16                          
    17                          ENDIF
    18                          
    19                          section code_crt_init
    20                          section code_crt_init_exit
    21                          section code_crt_main
    22                          section code_crt_exit
    23                          section code_crt_exit_exit
    24                          section code_crt_return
    25                          section code_crt_common
    26                          
    27                          IF (__crt_org_vector_table) && (__crt_org_vector_table != -0x80) && (__crt_org_vector_table != -0x100)
    28                          
    29                          section code_crt_interrupt_vector_table
    30                          
    31                          ENDIF
    32                          
    33                          section code_driver
    34                          section code_font
    35                          section code_clib
    36                            include "../../clib_code.inc"
/opt/z88dk/lib/config/../../libsrc/_DEVELOPMENT/target/z80/../../clib_code.inc:
     1                          
     2                          ;; clib code segments ;;;;;;;;;
     3                          
     4                          section code_adt_b_array
     5                          section code_adt_b_vector
     6                          section code_adt_ba_priority_queue
     7                          section code_adt_ba_stack
     8                          section code_adt_bv_priority_queue
     9                          section code_adt_bv_stack
    10                          section code_adt_p_forward_list
    11                          section code_adt_p_forward_list_alt
    12                          section code_adt_p_list
    13                          section code_adt_p_queue
    14                          section code_adt_p_stack
    15                          section code_adt_w_array
    16                          section code_adt_w_vector
    17                          section code_adt_wa_priority_queue
    18                          section code_adt_wa_stack
    19                          section code_adt_wv_priority_queue
    20                          section code_adt_wv_stack
    21                          section code_alloc_balloc
    22                          section code_alloc_malloc
    23                          section code_alloc_obstack
    24                          section code_arch
    25                          section code_bifrost_h
    26                          section code_bifrost_l
    27                          section code_bifrost2
    28                          section code_compress_aplib
    29                          section code_compress_zx7
    30                          section code_compress_zx0
    31                          section code_compress_zx1
    32                          section code_compress_zx2
    33                          section code_ctype
    34                          section code_driver_general
    35                          section code_driver_character_input
    36                          section code_driver_character_output
    37                          section code_driver_memstream
    38                          section code_driver_terminal_input
    39                          section code_driver_terminal_output
    40                          section code_driver_tty
    41                          section code_env
    42                          section code_error
    43                          section code_esxdos
    44                          section code_fcntl
    45                          section code_font_fzx
    46                          section code_fp_am9511
    47                          section code_fp_math48
    48                          section code_fp_math32
    49                          section code_fp_math16
    50                          section code_fp_mbf32
    51                          section code_im2
    52                          section code_input
    53                          section code_inttypes
    54                          section code_l
    55                          section code_l_sccz80
    56                          section code_l_sdcc
    57                          section code_l_clang
    58                          section code_locale
    59                          section code_math
    60                          section code_network
    61                          section code_nirvanam
    62                          section code_nirvanap
    63                          section code_PSGlib
    64                          section code_setjmp
    65                          section code_SMSlib
    66                          section code_sound_bit
    67                          section code_sound_ay
    68                          section code_stdio
    69                          section code_stdlib
    70                          section code_string
    71                          section code_temp_sp1
    72                          section code_threads
    73                          section code_threads_mutex
    74                          section code_time
    75                          section code_z180
    76                          section code_z80
    77                          
    78                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    79                          
/opt/z88dk/lib/config/../../libsrc/_DEVELOPMENT/target/z80/../crt_memory_model_z80.inc:
    37                          section code_lib
    38                          section code_compiler
    39                          section code_user
    40                          
    41                          section rodata_align_256
    42                          align 256
    43                          
    44                          section rodata_align_128
    45                          align 128
    46                          
    47                          section rodata_align_64
    48                          align 64
    49                          
    50                          section rodata_align_32
    51                          align 32
    52                          
    53                          section rodata_align_16
    54                          align 16
    55                          
    56                          section rodata_align_8
    57                          align 8
    58                          
    59                          section rodata_align_4
    60                          align 4
    61                          
    62                          section rodata_align_2
    63                          align 2
    64                          
    65                          section rodata_driver
    66                          section rodata_font
    67                          section rodata_clib
    68                            include "../../clib_rodata.inc"
/opt/z88dk/lib/config/../../libsrc/_DEVELOPMENT/target/z80/../../clib_rodata.inc:
     1                          
     2                          ;; clib rodata segments ;;;;;;;
     3                          
     4                          section rodata_align_256
     5                          section rodata_align_128
     6                          section rodata_align_64
     7                          section rodata_align_32
     8                          section rodata_align_16
     9                          section rodata_align_8
    10                          section rodata_align_4
    11                          section rodata_align_2
    12                          section rodata_arch
    13                          section rodata_env
    14                          section rodata_error_strings
    15                          section rodata_error_string_end
    16  0000  00                defb 0
    17                          section rodata_fcntl
    18                          section rodata_font_4x8
    19                          section rodata_font_8x8
    20                          section rodata_font_fzx
    21                          section rodata_fp_am9511
    22                          section rodata_fp_math48
    23                          section rodata_fp_math32
    24                          section rodata_fp_math16
    25                          section rodata_fp_mbf32
    26                          section rodata_input
    27                          section rodata_SMSlib
    28                          section rodata_sound_ay
    29                          section rodata_sound_bit
    30                          section rodata_stdio
    31                          section rodata_stdlib
    32                          
    33                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    34                          
/opt/z88dk/lib/config/../../libsrc/_DEVELOPMENT/target/z80/../crt_memory_model_z80.inc:
    69                            ;;section rodata_error_strings
    70                            ;;section rodata_error_string_end
    71                            ;;defb 0
    72                          section rodata_lib
    73                          section rodata_compiler
    74                          section rodata_user
    75                          
    76                          SECTION CODE_END
    77                          
    78                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    79                          
    80                          SECTION DATA
    81                          
    82                          IF __crt_org_data
    83                          
    84                             org __crt_org_data
    85                          
    86                          ELSE
    87                          
    88                             IF __crt_model
    89                          
    90                                "DATA section address must be specified for rom models"
    91                          
    92                             ENDIF
    93                          
    94                          ENDIF
    95                          
    96                          section data_align_256
    97                          align 256
    98                          
    99                          section data_align_128
   100                          align 128
   101                          
   102                          section data_align_64
   103                          align 64
   104                          
   105                          section data_align_32
   106                          align 32
   107                          
   108                          section data_align_16
   109                          align 16
   110                          
   111                          section data_align_8
   112                          align 8
   113                          
   114                          section data_align_4
   115                          align 4
   116                          
   117                          section data_align_2
   118                          align 2
   119                          
   120                          section smc_jump_vectors
   121                          section smc_driver
   122                          section smc_font
   123                          section smc_clib
   124                            include "../../clib_smc.inc"
/opt/z88dk/lib/config/../../libsrc/_DEVELOPMENT/target/z80/../../clib_smc.inc:
     1                          
     2                          ;; clib self-modifying code ;;;
     3                          
     4                          section smc_fcntl
     5                          section smc_l
     6                          section smc_sound_bit
     7                          section smc_sound_ay
     8                          section smc_compress
     9                          
    10                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    11                          
/opt/z88dk/lib/config/../../libsrc/_DEVELOPMENT/target/z80/../crt_memory_model_z80.inc:
   125                          section smc_lib
   126                          section smc_compiler
   127                          section smc_user
   128                          
   129                          section data_crt
   130                          section data_driver
   131                          section data_font
   132                          section data_clib
   133                            include "../../clib_data.inc"
/opt/z88dk/lib/config/../../libsrc/_DEVELOPMENT/target/z80/../../clib_data.inc:
     1                          
     2                          ;; clib data segments ;;;;;;;;;
     3                          
     4                          section data_alloc_balloc
     5                          section data_alloc_malloc
     6                          section data_arch
     7                          section data_fcntl
     8                          section data_fcntl_stdio_heap_head
     9                          section data_fcntl_stdio_heap_body
    10                          section data_fcntl_stdio_heap_tail
    11                          section data_fcntl_fdtable_body
    12                          section data_fp_mbf32
    13                          section data_PSGlib
    14                          section data_SMSlib
    15                          section data_sound_bit
    16                          section data_sound_ay
    17                          section data_stdio
    18                          section data_stdlib
    19                          section data_threads
    20                          
    21                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    22                          
/opt/z88dk/lib/config/../../libsrc/_DEVELOPMENT/target/z80/../crt_memory_model_z80.inc:
   134                            ;;section data_fcntl_stdio_heap_head
   135                            ;;section data_fcntl_stdio_heap_body
   136                            ;;section data_fcntl_stdio_heap_tail
   137                            ;;section data_fcntl_fdtable_body
   138                          section data_lib
   139                          section data_compiler
   140                          section data_user
   141                          
   142                          SECTION DATA_END
   143                          
   144                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   145                          
   146                          SECTION BSS
   147                          
   148                          IF __crt_org_bss
   149                          
   150                             org __crt_org_bss
   151                          
   152                          ELSE
   153                          
   154                             IF __crt_model
   155                          
   156                                org -1
   157                          
   158                             ENDIF
   159                          
   160                          ENDIF
   161                          
   162                          section bss_align_256
   163                          align 256
   164                          
   165                          section bss_align_128
   166                          align 128
   167                          
   168                          section bss_align_64
   169                          align 64
   170                          
   171                          section bss_align_32
   172                          align 32
   173                          
   174                          section bss_align_16
   175                          align 16
   176                          
   177                          section bss_align_8
   178                          align 8
   179                          
   180                          section bss_align_4
   181                          align 4
   182                          
   183                          section bss_align_2
   184                          align 2
   185                          
   186                          section bss_crt
   187                          section bss_driver
   188                          section bss_font
   189                          section bss_clib
   190                            include "../../clib_bss.inc"
/opt/z88dk/lib/config/../../libsrc/_DEVELOPMENT/target/z80/../../clib_bss.inc:
     1                          
     2                          ;; clib bss segments ;;;;;;;;;;
     3                          
     4                          section bss_arch
     5                          section bss_alloc_balloc
     6                          section bss_alloc_malloc
     7                          section bss_compress_aplib
     8                          section bss_error
     9                          section bss_env
    10                          section bss_esxdos
    11                          section bss_fcntl
    12                          section bss_fp_am9511
    13                          section bss_fp_math48
    14                          section bss_fp_math32
    15                          section bss_fp_math16
    16                          section bss_fp_mbf32
    17                          section bss_input
    18                          section bss_PSGlib
    19                          section bss_SMSlib
    20                          section bss_sound_bit
    21                          section bss_sound_ay
    22                          section bss_stdio
    23                          section bss_stdlib
    24                          section bss_string
    25                          
    26                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    27                          
/opt/z88dk/lib/config/../../libsrc/_DEVELOPMENT/target/z80/../crt_memory_model_z80.inc:
   191                          section bss_lib
   192                          section bss_compiler
   193                          section bss_user
   194                          
   195                          section BSS_UNINITIALIZED
   196                          SECTION BSS_END
   197                          
   198                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   199                          
   200                          IF (__crt_org_vector_table = 0)
   201                          
   202                          section code_crt_interrupt_vector_table
   203                          org 0
   204                          
   205                          ENDIF
   206                          
   207                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   208                          
/opt/z88dk/lib/config//../..//libsrc/_DEVELOPMENT/target/z80/z80_crt.asm.m4:
   856                          
   857                          
   858                          
   859                             SECTION UNASSIGNED
   860                             org 0
   861                          
   862                             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   863                          
   864                          ENDIF
   865                          
   866                          ;; end memory model ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   867                          
   868                          
   869                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   870                          ;; INSTANTIATE DRIVERS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   871                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   872                          
   873                          ; The embedded target has no device drivers so it cannot
   874                          ; instantiate FILEs.
   875                          
   876                          ; It can use sprint/sscanf + family and it can create
   877                          ; memstreams in the default configuration.
   878                          
   879                          
   880                          ; When FILEs and FDSTRUCTs are instantiated labels are assigned
   881                          ; to point at created structures.
   882                          ;
   883                          ; The label formats are:
   884                          ;
   885                          ; __i_stdio_file_n     = address of static FILE structure #n (0..__I_STDIO_NUM_FILE-1)
   886                          ; __i_fcntl_fdstruct_n = address of static FDSTRUCT #n (0..__I_FCNTL_NUM_FD-1)
   887                          ; __i_fcntl_heap_n     = address of allocation #n on heap (0..__I_FCNTL_NUM_HEAP-1)
   888                          
   889                          
   890                          
   891                          
   892                          
   893                          
   894                             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   895                             ;; create open and closed FILE lists
   896                             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   897                          
   898                             ; __clib_fopen_max   = max number of open FILEs specified by user
   899                             ; 0 = number of static FILEs instantiated in crt
   900                             ; __i_stdio_file_n   = address of static FILE structure #n (0..I_STDIO_FILE_NUM-1)
   901                          
   902                          	PUBLIC __MAX_FOPEN
   903                          
   904                             SECTION data_clib
   905                             SECTION data_stdio
   906                          
   907                             IF (__clib_fopen_max > 0) || (0 > 0)
   908                          
   909                                ; number of FILEs > 0
   910                          
   911                                ; construct list of open files
   912                          
   913                                IF 0 > 0
   914                          
   915                                   ; number of FILEs statically generated > 0
   916                          
   917                                   SECTION data_clib
   918                                   SECTION data_stdio
   919                          
   920                                   PUBLIC __stdio_open_file_list
   921                          
   922                                   __stdio_open_file_list:  defw __i_stdio_file_-1
   923                          
   924                                ELSE
   925                          
   926                                   ; number of FILEs statically generated = 0
   927                          
   928                                   SECTION bss_clib
   929                                   SECTION bss_stdio
   930                          
   931                                   PUBLIC __stdio_open_file_list
   932                          
   933                                   __stdio_open_file_list:  defw 0
   934                          
   935                                ENDIF
   936                          
   937                                ; construct list of closed / available FILEs
   938                          
   939                                SECTION data_clib
   940                                SECTION data_stdio
   941                          
   942                                PUBLIC __stdio_closed_file_list
   943                          
   944                                __stdio_closed_file_list:   defw 0, __stdio_closed_file_list
   945                          
   946                                IF __clib_fopen_max > 0
   947                          
   948                                   defc __MAX_FOPEN = __clib_fopen_max
   949                          
   950                                   ; create extra FILE structures
   951                          
   952                                   SECTION bss_clib
   953                                   SECTION bss_stdio
   954                          
   955                                   __stdio_file_extra:      defs (__clib_fopen_max - 0) * 15
   956                          
   957                                   SECTION code_crt_init
   958                          
   959                                      ld bc,__stdio_closed_file_list
   960                                      ld de,__stdio_file_extra
   961                                      ld l,__clib_fopen_max - 0
   962                          
   963                                   loop:
   964                          
   965                                      push hl
   966                          
   967                                      EXTERN asm_p_forward_list_alt_push_front
   968                                      call asm_p_forward_list_alt_push_front
   969                          
   970                                      ld de,15
   971                                      add hl,de
   972                                      ex de,hl
   973                          
   974                                      pop hl
   975                          
   976                                      dec l
   977                                      jr nz, loop
   978                          
   979                                ELSE
   980                          
   981                                   defc __MAX_FOPEN = 0
   982                          
   983                                ENDIF
   984                          
   985                             ENDIF
   986                          
   987                             IF (__clib_fopen_max = 0) && (0 = 0)
   988                          
   989                                defc __MAX_FOPEN = 0
   990                          
   991                                ; create empty file lists
   992                          
   993                                SECTION bss_clib
   994                                SECTION bss_stdio
   995                          
   996                                PUBLIC __stdio_open_file_list
   997  0000  0000                    __stdio_open_file_list:  defw 0
   998                          
   999                                SECTION data_clib
  1000                                SECTION data_stdio
  1001                          
  1002                                PUBLIC __stdio_closed_file_list
  1003  0000  00000000                __stdio_closed_file_list:   defw 0, __stdio_closed_file_list
  1004                          
  1005                             ENDIF
  1006                          
  1007                             IF (__clib_fopen_max < 0) && (0 = 0)
  1008                          
  1009                                defc __MAX_FOPEN = 0
  1010                          
  1011                             ENDIF
  1012                          
  1013                             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1014                             ;; create fd table
  1015                             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1016                          
  1017                             ; __clib_open_max  = max number of open fds specified by user
  1018                             ; 0 = number of static file descriptors created
  1019                          
  1020                             PUBLIC __fcntl_fdtbl
  1021                             PUBLIC __fcntl_fdtbl_size
  1022                          
  1023                             IF 0 > 0
  1024                          
  1025                                ; create rest of fd table in data segment
  1026                          
  1027                                SECTION data_fcntl_fdtable_body
  1028                          
  1029                                EXTERN __data_fcntl_fdtable_body_head
  1030                          
  1031                                defc __fcntl_fdtbl = __data_fcntl_fdtable_body_head
  1032                          
  1033                                IF __clib_open_max > 0
  1034                          
  1035                                   SECTION data_fcntl_fdtable_body
  1036                          
  1037                                   defs (__clib_open_max - 0) * 2
  1038                                   defc __fcntl_fdtbl_size = __clib_open_max
  1039                          
  1040                                ELSE
  1041                          
  1042                                   defc __fcntl_fdtbl_size = 0
  1043                          
  1044                                ENDIF
  1045                          
  1046                             ELSE
  1047                          
  1048                                IF __clib_open_max > 0
  1049                          
  1050                                   ; create fd table in bss segment
  1051                          
  1052                                   SECTION bss_clib
  1053                                   SECTION bss_fcntl
  1054                          
  1055                                   __fcntl_fdtbl:        defs __clib_open_max * 2
  1056                          
  1057                                ELSE
  1058                          
  1059                                   ; no fd table at all
  1060                          
  1061                                   defc __fcntl_fdtbl = 0
  1062                          
  1063                                ENDIF
  1064                          
  1065                                defc __fcntl_fdtbl_size = __clib_open_max
  1066                          
  1067                             ENDIF
  1068                          
  1069                          	PUBLIC __MAX_OPEN
  1070                          	defc   __MAX_OPEN = __fcntl_fdtbl_size
  1071                          
  1072                             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1073                             ;; finalize stdio heap
  1074                             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1075                          
  1076                             ; __clib_stdio_heap_size  = desired stdio heap size in bytes
  1077                             ; 0  = byte size of static FDSTRUCTs
  1078                             ; 0   = number of heap allocations
  1079                             ; __i_fcntl_heap_n     = address of allocation #n on heap (0..__I_FCNTL_NUM_HEAP-1)
  1080                          
  1081                             IF 0 > 0
  1082                          
  1083                                ; static FDSTRUCTs have been allocated in the heap
  1084                          
  1085                                SECTION data_clib
  1086                                SECTION data_fcntl
  1087                          
  1088                                PUBLIC __stdio_heap
  1089                          
  1090                                __stdio_heap:            defw __stdio_block
  1091                          
  1092                                SECTION data_fcntl_stdio_heap_head
  1093                          
  1094                                __stdio_block:
  1095                          
  1096                                   defb 0                ; no owner
  1097                                   defb 0x01             ; mtx_plain
  1098                                   defb 0                ; number of lock acquisitions
  1099                                   defb 0xfe             ; spinlock (unlocked)
  1100                                   defw 0                ; list of threads blocked on mutex
  1101                          
  1102                                IF __clib_stdio_heap_size > (0 + 14)
  1103                          
  1104                                   ; expand stdio heap to desired size
  1105                          
  1106                                   SECTION data_fcntl_stdio_heap_body
  1107                          
  1108                                   __i_fcntl_heap_0:
  1109                          
  1110                                      defw __i_fcntl_heap_1
  1111                                      defw 0
  1112                                      defw __i_fcntl_heap_-1
  1113                                      defs __clib_stdio_heap_size - 0 - 14
  1114                          
  1115                                   ; terminate stdio heap
  1116                          
  1117                                   SECTION data_fcntl_stdio_heap_tail
  1118                          
  1119                                   __i_fcntl_heap_1:   defw 0
  1120                          
  1121                                ELSE
  1122                          
  1123                                   ; terminate stdio heap
  1124                          
  1125                                   SECTION data_fcntl_stdio_heap_tail
  1126                          
  1127                                   __i_fcntl_heap_0:   defw 0
  1128                          
  1129                                ENDIF
  1130                          
  1131                             ELSE
  1132                          
  1133                                ; no FDSTRUCTs statically created
  1134                          
  1135                                IF __clib_stdio_heap_size > 14
  1136                          
  1137                                   SECTION data_clib
  1138                                   SECTION data_fcntl
  1139                          
  1140                                   PUBLIC __stdio_heap
  1141                          
  1142  0000  0000                       __stdio_heap:         defw __stdio_block
  1143                          
  1144                                   SECTION bss_clib
  1145                                   SECTION bss_fcntl
  1146                          
  1147                                   PUBLIC __stdio_block
  1148                          
  1149  0000  0000000000000000           __stdio_block:         defs __clib_stdio_heap_size
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
  1150                          
  1151                                   SECTION code_crt_init
  1152                          
  1153  0000  210000                     ld hl,__stdio_block
  1154  0003  010000                     ld bc,__clib_stdio_heap_size
  1155                          
  1156                                   EXTERN asm_heap_init
  1157  0006  cd0000                     call asm_heap_init
  1158                          
  1159                                ENDIF
  1160                          
  1161                             ENDIF
  1162                          
  1163                          
  1164                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1165                          ;; STARTUP ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1166                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1167                          
  1168                          SECTION CODE
  1169                          
  1170                          PUBLIC __Start, __Exit
  1171                          
  1172                          EXTERN _main
  1173                          
  1174                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1175                          ;; USER PREAMBLE ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1176                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1177                          
  1178                          IF __crt_include_preamble
  1179                          
  1180                             include "crt_preamble.asm"
crt_preamble.asm:
     1                          ;-------------------------------------------------------------------------------
     2                          ;
     3                          ;   Author: Ivo Filot <ivo@ivofilot.nl>
     4                          ;
     5                          ;   P2000T-SDCARD is free software:
     6                          ;   you can redistribute it and/or modify it under the terms of the
     7                          ;   GNU General Public License as published by the Free Software
     8                          ;   Foundation, either version 3 of the License, or (at your option)
     9                          ;   any later version.
    10                          ;
    11                          ;   P2000T-SDCARD is distributed in the hope that it will be useful,
    12                          ;   but WITHOUT ANY WARRANTY; without even the implied warranty
    13                          ;   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
    14                          ;   See the GNU General Public License for more details.
    15                          ;
    16                          ;   You should have received a copy of the GNU General Public License
    17                          ;   along with this program.  If not, see http://www.gnu.org/licenses/.
    18                          ;
    19                          ;-------------------------------------------------------------------------------
    20                          
    21                          ; signature, byte count, CRC16 checksum
    22                          ; the byte count and CRC16 checksum need to be set later
    23  0000  0000000000        DB 0x5E,0x00,0x00,0x00,0x00
    24                          
    25                          ; name of the program (8+3 bytes)
    26  0005  00004c4c00000000  DB 'H','E','L','L','O','W','O','R','P','R','G'
              000000            
    27                          
    28                          ; first address to call is thus $A010
    29  0010  c30000            jp __Start
    30                          
/opt/z88dk/lib/config//../..//libsrc/_DEVELOPMENT/target/z80/z80_crt.asm.m4:
  1181                             SECTION CODE
  1182                          
  1183                          ENDIF
  1184                          
  1185                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1186                          ;; PAGE ZERO ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1187                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1188                          
  1189                          IF (ASMPC = 0) && (__crt_org_code = 0)
  1190                          
  1191                             include "../crt_page_zero_z80.inc"
  1192                          
  1193                          ENDIF
  1194                          
  1195                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1196                          ;; CRT INIT ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1197                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1198                          
  1199                          __Start:
  1200                          
  1201                             include "../crt_start_di.inc"
/opt/z88dk/lib/config/../../libsrc/_DEVELOPMENT/target/z80/../crt_start_di.inc:
     1                             IF (__crt_enable_eidi & 0x01)
     2                          
     3                                di
     4                          
     5                             ENDIF
     6                          
/opt/z88dk/lib/config//../..//libsrc/_DEVELOPMENT/target/z80/z80_crt.asm.m4:
  1202                             include "../crt_save_sp.inc"
/opt/z88dk/lib/config/../../libsrc/_DEVELOPMENT/target/z80/../crt_save_sp.inc:
     1                          
     2                             ; do not save sp if
     3                             ; * program jumps to address on exit
     4                             ; * program halts on exit
     5                          
     6                             IF (__crt_on_exit & 0x10000)
     7                          
     8                                IF (__crt_on_exit & 0x8)
     9                          
    10                                   ; program restarts on exit
    11                          
    12                                   IF (__register_sp = -1)
    13                          
    14                                      IF __CPU_INTEL__ || __CPU_GBZ80__
    15                                       ld hl,sp
    16                                       ld (__sp_or_ret),hl
    17                                     ELSE
    18                                       ld (__sp_or_ret),sp
    19                                     ENDIF
    20                          
    21                                   ENDIF
    22                          
    23                                ELIF (__crt_on_exit & 0x4)
    24                          
    25                                   ; program jumps to caller on exit
    26                          
    27                                   IF (__crt_enable_commandline != 2)
    28                                      pop hl
    29                                      ld (__sp_or_ret),hl
    30                                   ELSE
    31                                      pop de
    32                                      ld (__sp_or_ret),de
    33                                   ENDIF
    34                          
    35                                ELIF (__crt_on_exit & 0x2)
    36                          
    37                                   ; program returns to caller on exit
    38                          
    39                                   IF __CPU_INTEL__ || __CPU_GBZ80__
    40                                      ld hl,sp
    41                                      ld (__sp_or_ret),hl
    42                                   ELSE
    43  0013  ed730000                      ld (__sp_or_ret),sp
    44                                   ENDIF
    45                          
    46                                ENDIF
    47                          
    48                             ENDIF
    49                          
/opt/z88dk/lib/config//../..//libsrc/_DEVELOPMENT/target/z80/z80_crt.asm.m4:
  1203                          
  1204                          __Restart:
  1205                          
  1206                             include "../crt_init_sp.inc"
/opt/z88dk/lib/config/../../libsrc/_DEVELOPMENT/target/z80/../crt_init_sp.inc:
     1                          IF __register_sp < -1
     2                             IF __CPU_INTEL__
     3                               ld hl,(-__register_sp)      ; stack location is stored at memory address
     4                               ld sp,hl
     5                             ELSE
     6                               ld sp,(-__register_sp)      ; stack location is stored at memory address
     7                             ENDIF
     8                          ELSE
     9                          
    10                             IF __register_sp != -1
    11                          
    12  0017  310000                  ld sp,__register_sp      ; stack is at fixed address
    13                          
    14                             ENDIF
    15                          
    16                          ENDIF
    17                          
/opt/z88dk/lib/config//../..//libsrc/_DEVELOPMENT/target/z80/z80_crt.asm.m4:
  1207                          
  1208                             ; command line
  1209                          
  1210                          IF (__crt_enable_commandline = 1) || (__crt_enable_commandline >= 3)
  1211                          
  1212                             include "../crt_cmdline_empty.inc"
  1213                          
  1214                          ENDIF
  1215                          
  1216                          __Restart_2:
  1217                          
  1218                          IF __crt_enable_commandline >= 1
  1219                          
  1220                             push hl                     ; argv
  1221                             push bc                     ; argc
  1222                          
  1223                          ENDIF
  1224                          
  1225                             ; initialize data section
  1226                          
  1227                             include "../clib_init_data.inc"
/opt/z88dk/lib/config/../../libsrc/_DEVELOPMENT/target/z80/../clib_init_data.inc:
     1                          
     2                             ; initialize data section
     3                          
     4                             IF (__crt_model = 1)
     5                          
     6                                ; rom model + data section is not compressed
     7                          
     8                                EXTERN __CODE_END_tail
     9                                EXTERN __DATA_head, __DATA_END_tail
    10                          
    11                                ld hl,__CODE_END_tail
    12                                ld de,__DATA_head
    13                                ld bc,__DATA_END_tail - __DATA_head
    14                          
    15                                EXTERN asm_memcpy
    16                                call   asm_memcpy
    17                          
    18                             ENDIF
    19                          
    20                             IF (__crt_model >= 2)
    21                          
    22                                ; rom model + data section is compressed
    23                          
    24                                EXTERN __CODE_END_tail
    25                                EXTERN __DATA_head, __DATA_END_tail
    26                          
    27                                ld hl,__CODE_END_tail
    28                                ld de,__DATA_head
    29                                ld bc,__DATA_END_tail - __DATA_head
    30                          
    31                                ld a,b
    32                                or c
    33                          
    34                              IF (__crt_model = 2)
    35                                EXTERN   asm_dzx7_standard
    36                                call nz, asm_dzx7_standard
    37                              ELIF (__crt_model = 3)
    38                                EXTERN   asm_dzx0_standard
    39                                call nz, asm_dzx0_standard
    40                              ENDIF
    41                          
    42                             ENDIF
    43                          
/opt/z88dk/lib/config//../..//libsrc/_DEVELOPMENT/target/z80/z80_crt.asm.m4:
  1228                          
  1229                             ; initialize bss section
  1230                          
  1231                             include "../clib_init_bss.inc"
/opt/z88dk/lib/config/../../libsrc/_DEVELOPMENT/target/z80/../clib_init_bss.inc:
     1                          
     2                             ; initialize bss section
     3                          
     4                             IF __crt_initialize_bss
     5                          
     6                                   EXTERN asm_memset
     7                                   EXTERN __BSS_head, __BSS_UNINITIALIZED_head
     8                          
     9                                   ld hl,__BSS_head
    10                                   ld bc,__BSS_UNINITIALIZED_head - __BSS_head
    11                          
    12                                   ld e,0
    13                                   call asm_memset
    14                          
    15                             ENDIF
    16                          
/opt/z88dk/lib/config//../..//libsrc/_DEVELOPMENT/target/z80/z80_crt.asm.m4:
  1232                          
  1233                             ; interrupt mode
  1234                          
  1235                             include "../crt_set_interrupt_mode.inc"
/opt/z88dk/lib/config/../../libsrc/_DEVELOPMENT/target/z80/../crt_set_interrupt_mode.inc:
     1                             IF (__crt_org_vector_table > 0)
     2                          
     3                                ; copy interrupt vector table to final location
     4                          
     5                                EXTERN __code_crt_interrupt_vector_table_head
     6                                EXTERN __code_crt_interrupt_vector_table_size
     7                          
     8                                ld hl,__code_crt_interrupt_vector_table_head
     9                                ld de,__crt_org_vector_table
    10                                ld bc,__code_crt_interrupt_vector_table_size
    11                          
    12                                EXTERN asm_memcpy
    13                                call   asm_memcpy
    14                          
    15                             ENDIF
    16                          
    17                             IF (__crt_org_vector_table != 0)
    18                          
    19                                IF (__crt_org_vector_table < 0)
    20                          
    21                                   ld a,-__crt_org_vector_table/$100
    22                          
    23                                ELSE
    24                          
    25                                   ld a,__crt_org_vector_table/$100
    26                          
    27                                ENDIF
    28                          
    29                                ld i,a
    30                          
    31                                IF (__Z180)
    32                          
    33                                  ; Set the z180 internal interrupt vector low byte
    34                          
    35                                  IF (__crt_org_vector_table < 0)
    36                          
    37                                     ld a,+(-__crt_org_vector_table+__IO_VECTOR_BASE)&$E0
    38                          
    39                                  ELSE
    40                          
    41                                     ld a,+(__crt_org_vector_table+__IO_VECTOR_BASE)&$E0
    42                          
    43                                  ENDIF
    44                          
    45                                  out0 (IL),a
    46                          
    47                                ENDIF
    48                          
    49                             ENDIF
    50                          
    51                             IF (__crt_interrupt_mode >= 0) && (__crt_interrupt_mode <= 2)
    52                          
    53                                ; set interrupt mode
    54                          
    55                                im __crt_interrupt_mode
    56                          
    57                             ENDIF
    58                          
/opt/z88dk/lib/config//../..//libsrc/_DEVELOPMENT/target/z80/z80_crt.asm.m4:
  1236                          
  1237                          SECTION code_crt_init          ; user and library initialization
  1238                          
  1239                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1240                          ;; MAIN ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1241                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1242                          
  1243                          SECTION code_crt_main
  1244                          
  1245                             include "../crt_start_ei.inc"
/opt/z88dk/lib/config/../../libsrc/_DEVELOPMENT/target/z80/../crt_start_ei.inc:
     1                             IF (__crt_enable_eidi & 0x02)
     2                          
     3  0000  fb                      ei
     4                          
     5                             ENDIF
     6                          
/opt/z88dk/lib/config//../..//libsrc/_DEVELOPMENT/target/z80/z80_crt.asm.m4:
  1246                          
  1247                             ; call user program
  1248                          
  1249  0001  cd0000               call _main                  ; hl = return status
  1250                          
  1251                             ; run exit stack
  1252                          
  1253                          IF __clib_exit_stack_size > 0
  1254                          
  1255                             EXTERN asm_exit
  1256                             jp asm_exit                 ; exit function jumps to __Exit
  1257                          
  1258                          ENDIF
  1259                          
  1260                          __Exit:
  1261                          
  1262                          IF !((__crt_on_exit & 0x10000) && (__crt_on_exit & 0x8))
  1263                          
  1264                             ; not restarting
  1265                          
  1266  0004  e5                   push hl                     ; save return status
  1267                          
  1268                          ENDIF
  1269                          
  1270                          SECTION code_crt_exit          ; user and library cleanup
  1271                          SECTION code_crt_return
  1272                          
  1273                             ; close files
  1274                          
  1275                             include "../clib_close.inc"
/opt/z88dk/lib/config/../../libsrc/_DEVELOPMENT/target/z80/../clib_close.inc:
     1                             IF __crt_enable_close
     2                          
     3                                ; TODO
     4                                ; close open files
     5                          
     6                             ENDIF
     7                          
/opt/z88dk/lib/config//../..//libsrc/_DEVELOPMENT/target/z80/z80_crt.asm.m4:
  1276                          
  1277                             ; terminate
  1278                          
  1279                             include "../crt_exit_eidi.inc"
/opt/z88dk/lib/config/../../libsrc/_DEVELOPMENT/target/z80/../crt_exit_eidi.inc:
     1                             IF (__crt_enable_eidi & 0x10)
     2                          
     3                                di
     4                          
     5                             ENDIF
     6                          
     7                             IF (__crt_interrupt_mode_exit >= 0) && (__crt_interrupt_mode_exit <= 2)
     8                          
     9                                   im __crt_interrupt_mode_exit
    10                          
    11                             ENDIF
    12                          
    13                             IF (__crt_enable_eidi & 0x20)
    14                          
    15  0000  fb                      ei
    16                          
    17                             ENDIF
    18                          
/opt/z88dk/lib/config//../..//libsrc/_DEVELOPMENT/target/z80/z80_crt.asm.m4:
  1280                             include "../crt_restore_sp.inc"
/opt/z88dk/lib/config/../../libsrc/_DEVELOPMENT/target/z80/../crt_restore_sp.inc:
     1                          
     2                             IF (__crt_on_exit & 0x10000)
     3                          
     4                                IF (__crt_on_exit & 0x8)
     5                          
     6                                   ; program restarts
     7                          
     8                                   IF (__crt_enable_commandline < 2)
     9                          
    10                                      IF (__register_sp = -1)
    11                          
    12                                        IF __CPU_INTEL__
    13                                          ld hl,(__sp_or_ret)
    14                                          ld sp,hl
    15                                        ELSE
    16                                          ld sp,(__sp_or_ret)
    17                                        ENDIF
    18                          
    19                                      ENDIF
    20                          
    21                                   ELSE
    22                          
    23                                      IF (__register_sp = -1)
    24                          
    25                                        IF __CPU_INTEL__
    26                                          ld hl,(__sp_or_ret)
    27                                          ld sp,hl
    28                                        ELSE
    29                                          ld sp,(__sp_or_ret)
    30                                        ENDIF
    31                          
    32                                      ENDIF
    33                          
    34                                   ENDIF
    35                          
    36                                ELSE
    37                          
    38  0001  e1                         pop hl                ; hl = return status
    39                          
    40                                   IF (__crt_on_exit & 0x2)
    41                          
    42                                      ; program returns to caller
    43                          
    44                                     IF __CPU_INTEL__
    45                                       ld hl,(__sp_or_ret)
    46                                       ld sp,hl
    47                                     ELSE
    48  0002  00000000                       ld sp,(__sp_or_ret)
    49                                     ENDIF
    50                          
    51                                   ENDIF
    52                          
    53                                ENDIF
    54                          
    55                             ELSE
    56                          
    57                                ; program jumps to absolute address
    58                          
    59                                pop hl                   ; hl = return status
    60                          
    61                             ENDIF
    62                          
/opt/z88dk/lib/config//../..//libsrc/_DEVELOPMENT/target/z80/z80_crt.asm.m4:
  1281                             include "../crt_program_exit.inc"
/opt/z88dk/lib/config/../../libsrc/_DEVELOPMENT/target/z80/../crt_program_exit.inc:
     1                          
     2                             IF (__crt_on_exit & 0x10000)
     3                          
     4                                IF (__crt_on_exit & 0x8)
     5                          
     6                                   ; program restarts
     7                          
     8                                   IF (__crt_enable_commandline < 2)
     9                          
    10                                      jp __Restart
    11                          
    12                                   ELSE
    13                          
    14                                      IF (__register_sp != -1)
    15                          
    16                                         include "../crt_init_sp.inc"
    17                          
    18                                      ENDIF
    19                          
    20                                      include "../crt_cmdline_empty.inc"
    21                          
    22                                      jp __Restart_2
    23                          
    24                                   ENDIF
    25                          
    26                                ELIF (__crt_on_exit & 0x4)
    27                          
    28                                   ; program jumps to caller
    29                          
    30                                   ld de,(__sp_or_ret)
    31                                   push de
    32                                   ret
    33                          
    34                                ELIF (__crt_on_exit & 0x2)
    35                          
    36                                   ; program returns to caller
    37                          
    38  0006  45                         ret
    39                          
    40                                ELSE
    41                          
    42                                   ; program halts
    43                          
    44                                   halt
    45                                   jr ASMPC
    46                          
    47                                ENDIF
    48                          
    49                             ELSE
    50                          
    51                                ; program jumps to absolute address
    52                          
    53                                IF (__crt_on_exit & 0xffff)
    54                          
    55                                   jp __crt_on_exit & 0xffff
    56                          
    57                                ELSE
    58                          
    59                                   rst 0
    60                          
    61                                ENDIF
    62                          
    63                             ENDIF
    64                          
/opt/z88dk/lib/config//../..//libsrc/_DEVELOPMENT/target/z80/z80_crt.asm.m4:
  1282                          
  1283                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1284                          ;; RUNTIME VARS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1285                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1286                          
  1287                          include "../crt_jump_vectors_z80.inc"
/opt/z88dk/lib/config/../../libsrc/_DEVELOPMENT/target/z80/../crt_jump_vectors_z80.inc:
     1                          IF __page_zero_present
     2                          
     3                          SECTION smc_jump_vectors
     4                          
     5                          IF ((__crt_enable_rst & 0x0202) = 0x0202)
     6                          
     7                             PUBLIC _z80_rst_08h_vector
     8                          
     9                             defc _z80_rst_08h_vector = __z80_rst_08h + 1
    10                          
    11                             EXTERN _z80_rst_08h
    12                          
    13                             __z80_rst_08h:
    14                          
    15                                jp _z80_rst_08h
    16                          
    17                          ENDIF
    18                          
    19                          IF ((__crt_enable_rst & 0x0404) = 0x0404)
    20                          
    21                             PUBLIC _z80_rst_10h_vector
    22                          
    23                             defc _z80_rst_10h_vector = __z80_rst_10h + 1
    24                          
    25                             EXTERN _z80_rst_10h
    26                          
    27                             __z80_rst_10h:
    28                          
    29                                jp _z80_rst_10h
    30                          
    31                          ENDIF
    32                          
    33                          IF ((__crt_enable_rst & 0x0808) = 0x0808)
    34                          
    35                             PUBLIC _z80_rst_18h_vector
    36                          
    37                             defc _z80_rst_18h_vector = __z80_rst_18h + 1
    38                          
    39                             EXTERN _z80_rst_18h
    40                          
    41                             __z80_rst_18h:
    42                          
    43                                jp _z80_rst_18h
    44                          
    45                          ENDIF
    46                          
    47                          IF ((__crt_enable_rst & 0x1010) = 0x1010)
    48                          
    49                             PUBLIC _z80_rst_20h_vector
    50                          
    51                             defc _z80_rst_20h_vector = __z80_rst_20h + 1
    52                          
    53                             EXTERN _z80_rst_20h
    54                          
    55                             __z80_rst_20h:
    56                          
    57                                jp _z80_rst_20h
    58                          
    59                          ENDIF
    60                          
    61                          IF ((__crt_enable_rst & 0x2020) = 0x2020)
    62                          
    63                             PUBLIC _z80_rst_28h_vector
    64                          
    65                             defc _z80_rst_28h_vector = __z80_rst_28h + 1
    66                          
    67                             EXTERN _z80_rst_28h
    68                          
    69                             __z80_rst_28h:
    70                          
    71                                jp _z80_rst_28h
    72                          
    73                          ENDIF
    74                          
    75                          IF ((__crt_enable_rst & 0x4040) = 0x4040)
    76                          
    77                             PUBLIC _z80_rst_30h_vector
    78                          
    79                             defc _z80_rst_30h_vector = __z80_rst_30h + 1
    80                          
    81                             EXTERN _z80_rst_30h
    82                          
    83                             __z80_rst_30h:
    84                          
    85                                jp _z80_rst_30h
    86                          
    87                          ENDIF
    88                          
    89                          IF ((__crt_enable_rst & 0x8080) = 0x8080)
    90                          
    91                             PUBLIC _z80_rst_38h_vector
    92                          
    93                             defc _z80_rst_38h_vector = __z80_rst_38h + 1
    94                          
    95                             EXTERN _z80_rst_38h
    96                          
    97                             __z80_rst_38h:
    98                          
    99                                jp _z80_rst_38h
   100                          
   101                          ENDIF
   102                          
   103                          IF (__crt_enable_nmi > 1)
   104                          
   105                             PUBLIC _z80_nmi_vector
   106                          
   107                             defc _z80_nmi_vector = __z80_nmi + 1
   108                          
   109                             EXTERN _z80_nmi
   110                          
   111                             __z80_nmi:
   112                          
   113                                jp _z80_nmi
   114                          
   115                          ENDIF
   116                          
   117                          ENDIF
   118                          
/opt/z88dk/lib/config//../..//libsrc/_DEVELOPMENT/target/z80/z80_crt.asm.m4:
  1288                          
  1289                          IF (__crt_on_exit & 0x10000) && ((__crt_on_exit & 0x6) || ((__crt_on_exit & 0x8) && (__register_sp = -1)))
  1290                          
  1291                             SECTION BSS_UNINITIALIZED
  1292  0000  0000                 __sp_or_ret:  defw 0
  1293                          
  1294                          ENDIF
  1295                          
  1296                          include "../clib_variables.inc"
/opt/z88dk/lib/config/../../libsrc/_DEVELOPMENT/target/z80/../clib_variables.inc:
     1                          
     2                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     3                          ;; library variables ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     4                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     5                          
     6                          IF __clib_balloc_table_size > 0
     7                          
     8                             ; create balloc table
     9                          
    10                             SECTION data_clib
    11                             SECTION data_alloc_balloc
    12                          
    13                             PUBLIC __balloc_array
    14                          
    15                             __balloc_array:             defw __balloc_table
    16                          
    17                             SECTION bss_clib
    18                             SECTION bss_alloc_balloc
    19                          
    20                             __balloc_table:             defs __clib_balloc_table_size * 2
    21                          
    22                          ENDIF
    23                          
    24                          IF __clib_malloc_heap_size = -1
    25                          
    26                             ; place malloc heap between bss section and bottom of the stack
    27                          
    28                             SECTION data_clib
    29                             SECTION data_alloc_malloc
    30                          
    31                             PUBLIC __malloc_heap
    32                          
    33                             EXTERN __BSS_END_tail
    34                          
    35  0000  0000                 __malloc_heap:              defw __BSS_END_tail
    36                          
    37                             SECTION code_crt_init
    38                          
    39  0009  4fffff               ld hl,-1                    ; ensure sp == 0 is accepted
    40  000c  52                   add hl,sp                   ; hl = top of the stack
    41                          
    42  000d  500000               ld bc,__BSS_END_tail
    43                          
    44                          IF __CPU_8085__
    45                             sub hl,bc                   ; hl = space between top of stack and end of bss - 1
    46                          ELIF __CPU_8080__ || __CPU_GBZ80__
    47                             ld a,l
    48                             sub c
    49                             ld a,h
    50                             sbc b                       ; hl = space between top of stack and end of bss - 1
    51                          ELSE
    52  0010  b7                   or a
    53  0011  1300                 sbc hl,bc                   ; hl = space between top of stack and end of bss - 1
    54                          ENDIF
    55                          
    56  0013  da0400               jp C,__Exit                 ; if stack overlaps bss, this is a fatal error
    57                          
    58  0016  000e02               ld bc,__crt_stack_size + 14 ; amount of space reserved by stack + minimum heap size - 1
    59                          
    60                          IF __CPU_8085__
    61                             sub hl,bc                   ; hl = max heap size - 15
    62                          ELIF __CPU_8080__ || __CPU_GBZ80__
    63                             ld a,l
    64                             sub c
    65                             ld a,h
    66                             sbc b                       ; hl = max heap size - 15
    67                          ELSE
    68  0019  df42                 sbc hl,bc                   ; hl = max heap size - 15
    69                          ENDIF
    70                          
    71  001b  da0400               jp C,__Exit                 ; if no room for heap, this is a fatal error
    72                          
    73  001e  010f00               ld bc,15
    74  0021  09                   add hl,bc
    75                          
    76  0022  444d                 ld bc,hl                    ; bc = available heap size
    77                          
    78  0024  210000               ld hl,__BSS_END_tail        ; hl = __BSS_END_tail = start of heap
    79                          
    80                             EXTERN asm_heap_init
    81  0027  cd0000               call asm_heap_init
    82                          
    83                          ELIF __clib_malloc_heap_size < -1
    84                          
    85                             ; place malloc heap between bss section and including address abs(CLIB_MALLOC_HEAP_SIZE)
    86                          
    87                             SECTION data_clib
    88                             SECTION data_alloc_malloc
    89                          
    90                             PUBLIC __malloc_heap
    91                          
    92                             EXTERN __BSS_END_tail
    93                          
    94                             __malloc_heap:              defw __BSS_END_tail
    95                          
    96                             SECTION code_crt_init
    97                          
    98                             ld hl,-__clib_malloc_heap_size - 13
    99                          
   100                             ld bc,__BSS_END_tail
   101                          
   102                          IF __CPU_8085__
   103                             sub hl,bc                   ; hl = space between top of stack and end of bss - 1
   104                          ELIF __CPU_8080__ || __CPU_GBZ80__
   105                             ld a,l
   106                             sub c
   107                             ld a,h
   108                             sbc b
   109                          ELSE
   110                             or a
   111                             sbc hl,bc                   ; hl = space between top of stack and end of bss - 1
   112                          ENDIF
   113                          
   114                             jp C,__Exit                 ; if no room for minimum size heap, fatal error
   115                          
   116                             ld bc,14
   117                             add hl,bc
   118                          
   119                             ld bc,hl                    ; bc = available heap size
   120                          
   121                             ld hl,__BSS_END_tail        ; hl = __BSS_END_tail = start of heap
   122                          
   123                             EXTERN asm_heap_init
   124                             call asm_heap_init
   125                          
   126                          ELIF __clib_malloc_heap_size > 14
   127                          
   128                             ; create malloc heap in bss section
   129                          
   130                             SECTION data_clib
   131                             SECTION data_alloc_malloc
   132                          
   133                             PUBLIC __malloc_heap
   134                          
   135                             __malloc_heap:              defw __malloc_block
   136                          
   137                             SECTION bss_clib
   138                             SECTION bss_alloc_malloc
   139                          
   140                             __malloc_block:             defs __clib_malloc_heap_size
   141                          
   142                             SECTION code_crt_init
   143                          
   144                             ld hl,__malloc_block
   145                          
   146                             ld bc,__clib_malloc_heap_size
   147                          
   148                             EXTERN asm_heap_init
   149                             call asm_heap_init
   150                          
   151                          ENDIF
   152                          
   153                             ; create exit stack
   154                          
   155                             SECTION bss_clib
   156                             SECTION bss_stdlib
   157                          
   158                             PUBLIC __exit_stack
   159                          
   160  0000  00                   __exit_stack:               defb 0
   161                                                         defs __exit_stack_size * 2
   162                          
   163                             ; create quickexit stack
   164                          
   165                             SECTION bss_clib
   166                             SECTION bss_stdlib
   167                          
   168                             PUBLIC __quickexit_stack
   169                          
   170  0001  00                   __quickexit_stack:          defb 0
   171                                                         defs __quickexit_stack_size * 2
   172                          
   173                             ; assign thread id
   174                          
   175                             SECTION data_clib
   176                             SECTION data_threads
   177                          
   178                             PUBLIC __thrd_id
   179                          
   180  0000  01                   __thrd_id:                  defb 1
   181                          
   182                          ;; end library variables ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   183                          
/opt/z88dk/lib/config//../..//libsrc/_DEVELOPMENT/target/z80/z80_crt.asm.m4:
  1297                          
  1298                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1299                          ;; CLIB STUBS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1300                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1301                          
  1302                          include "../clib_stubs.inc"
/opt/z88dk/lib/config/../../libsrc/_DEVELOPMENT/target/z80/../clib_stubs.inc:
     1                          
     2                             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     3                             ;; unimplemented
     4                             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     5                          
     6                             ; system()
     7                          
     8                             PUBLIC __ch_system
     9                          
    10                             EXTERN error_zc
    11                          
    12                             defc __ch_system = error_zc
    13                          
    14                             ; threads
    15                             ; these functions are preliminary only
    16                          
    17                             PUBLIC __thread_context_switch
    18                             PUBLIC __thread_block_timeout
    19                             PUBLIC __thread_unblock
    20                          
    21                             EXTERN l_ret
    22                          
    23                             defc __thread_context_switch = l_ret
    24                             defc __thread_block_timeout  = l_ret
    25                             defc __thread_unblock        = l_ret
    26                          
    27                             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    28                             ;; dynamically generated functions
    29                             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    30                          
    31                             ; dynamic printf
    32                          
    33                             IFNDEF CLIB_OPT_PRINTF
    34                                IFDEF CLIB_OPT_PRINTF_2
    35                                   defc CLIB_OPT_PRINTF = 0
    36                                ENDIF
    37                             ENDIF
    38                          
    39                             IFNDEF CLIB_OPT_PRINTF_2
    40                                IFDEF CLIB_OPT_PRINTF
    41                                   defc CLIB_OPT_PRINTF_2 = 0
    42                                ENDIF
    43                             ENDIF
    44                          
    45                             IFDEF CLIB_OPT_PRINTF
    46                          
    47                                IF __SDCC_IY
    48                          
    49                                   INCLUDE "../../stdio/z80/asm_vfprintf_unlocked_iy.asm"
    50                          
    51                                ELSE
    52                          
    53                                   INCLUDE "../../stdio/z80/asm_vfprintf_unlocked.asm"
    54                          
    55                                ENDIF
    56                          
    57                             ENDIF
    58                          
    59                             ; dynamic scanf
    60                          
    61                             IFNDEF CLIB_OPT_SCANF
    62                                IFDEF CLIB_OPT_SCANF_2
    63                                   defc CLIB_OPT_SCANF = 0
    64                                ENDIF
    65                             ENDIF
    66                          
    67                             IFNDEF CLIB_OPT_SCANF_2
    68                                IFDEF CLIB_OPT_SCANF
    69                                   defc CLIB_OPT_SCANF_2 = 0
    70                                ENDIF
    71                             ENDIF
    72                          
    73                             IFDEF CLIB_OPT_SCANF
    74                          
    75                                IF __SDCC_IY
    76                          
    77                                   INCLUDE "../../stdio/z80/asm_vfscanf_unlocked_iy.asm"
    78                          
    79                                ELSE
    80                          
    81                                   INCLUDE "../../stdio/z80/asm_vfscanf_unlocked.asm"
    82                          
    83                                ENDIF
    84                          
    85                             ENDIF
    86                          
/opt/z88dk/lib/config//../..//libsrc/_DEVELOPMENT/target/z80/z80_crt.asm.m4:
  1303                          
  1304                          
  1305                          
  1306                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1307                          ;; rom model ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1308                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1309                          
  1310                          
  1311                          
  1312                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1313                          ;; compressed rom model ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1314                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1315                          
  1316                          
  1317                          
