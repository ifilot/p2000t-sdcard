name: build

on:
  push:
    branches: [ "master", "develop" ]
    tags:
    - 'v*'
  pull_request:
    branches: [ "master", "develop" ]

env:
  BUILD_TYPE: Release
  FLASHER_BIN: FLASHER.BIN
  LAUNCHER_BIN: LAUNCHER.BIN
  BASICROM_BIN: BASICBOOTSTRAP.BIN
  MULTIROM_BIN: MULTIROM.BIN

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions: write-all
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}

################################################################################

  # Launcher for the SLOT2 cartridge
  build-launcher-0x60:
    runs-on: ubuntu-latest
    container: 
      image: z88dk/z88dk

    steps:
    - uses: actions/checkout@v3
    - name: Build launcher application
      run: |
        cd src
        sed -i "s/0x40/0x60/" ports.h
        sed -i "s/\$40/\$60/" ports.inc
        sed -i 's/node[[:digit:]]\+/node2000000/g' Makefile
        make launcher
        ls -alh LAUNCHER*
    - name: Upload launcher
      uses: actions/upload-artifact@v4
      with:
        name: LAUNCHER-0x60-UNSIGNED
        path: src/${{env.LAUNCHER_BIN}}

  sign-launcher-0x60:
    runs-on: ubuntu-latest
    needs: [build-launcher-0x60]
    permissions: write-all
    steps:
    - name: Install dependencies
      run: sudo apt install -y cmake build-essential libtclap-dev libboost-all-dev git
    - name: Download repository
      run: git clone https://github.com/ifilot/crc16sign.git --depth 1
    - name: build crc16sign
      run: |
        cd crc16sign
        mkdir build
        cd build
        cmake ../src
        make -j
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: LAUNCHER-0x60-UNSIGNED
        path: ./
    - name: Sign binary
      run: |
        crc16sign/build/crc16sign -i ${{env.LAUNCHER_BIN}} -o ${{env.LAUNCHER_BIN}} -s
    - name: Upload launcher
      uses: actions/upload-artifact@v4
      with:
        name: LAUNCHER-0x60
        path: ${{env.LAUNCHER_BIN}}

  deploy-launcher-0x60:
    runs-on: ubuntu-latest
    needs: [build-launcher-0x60, create-release, sign-launcher-0x60]
    permissions: write-all
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
    - name: Download LAUNCHER
      uses: actions/download-artifact@v4
      with:
        name: LAUNCHER-0x60
        path: ./
    - name: Upload Release Asset
      id: upload-release-asset-launcher
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ${{env.LAUNCHER_BIN}}
        asset_name: LAUNCHER-0x60
        asset_content_type: application/octet-stream

#-------------------------------------------------------------------------------

  # Launcher for the SLOT2 cartridge
  build-launcher-0x40:
    runs-on: ubuntu-latest
    container: 
      image: z88dk/z88dk

    steps:
    - uses: actions/checkout@v3
    - name: Build launcher application
      run: |
        cd src
        sed -i 's/node[[:digit:]]\+/node2000000/g' Makefile
        make launcher
        ls -alh LAUNCHER*
    - name: Upload launcher
      uses: actions/upload-artifact@v4
      with:
        name: LAUNCHER-0x40-UNSIGNED
        path: src/${{env.LAUNCHER_BIN}}

  sign-launcher-0x40:
    runs-on: ubuntu-latest
    needs: [build-launcher-0x40]
    permissions: write-all
    steps:
    - name: Install dependencies
      run: sudo apt install -y cmake build-essential libtclap-dev libboost-all-dev git
    - name: Download repository
      run: git clone https://github.com/ifilot/crc16sign.git --depth 1
    - name: build crc16sign
      run: |
        cd crc16sign
        mkdir build
        cd build
        cmake ../src
        make -j
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: LAUNCHER-0x40-UNSIGNED
        path: ./
    - name: Sign binary
      run: |
        crc16sign/build/crc16sign -i ${{env.LAUNCHER_BIN}} -o ${{env.LAUNCHER_BIN}} -s
    - name: Upload launcher
      uses: actions/upload-artifact@v4
      with:
        name: LAUNCHER-0x40
        path: ${{env.LAUNCHER_BIN}}

  deploy-launcher-0x40:
    runs-on: ubuntu-latest
    needs: [build-launcher-0x40, create-release, sign-launcher-0x40]
    permissions: write-all
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
    - name: Download LAUNCHER
      uses: actions/download-artifact@v4
      with:
        name: LAUNCHER-0x40
        path: ./
    - name: Upload Release Asset
      id: upload-release-asset-launcher
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ${{env.LAUNCHER_BIN}}
        asset_name: LAUNCHER-0x40
        asset_content_type: application/octet-stream

################################################################################

  # Flasher for the SLOT2 cartridge
  build-flasher-0x60:
    runs-on: ubuntu-latest
    container: 
      image: z88dk/z88dk

    steps:
    - uses: actions/checkout@v3
    - name: Build launcher application
      run: |
        cd src
        sed -i "s/0x40/0x60/" ports.h
        sed -i "s/\$40/\$60/" ports.inc
        sed -i 's/node[[:digit:]]\+/node2000000/g' Makefile
        make flasher
        ls -alh FLASHER*
    - name: Upload flasher
      uses: actions/upload-artifact@v4
      with:
        name: FLASHER-0x60
        path: src/${{env.FLASHER_BIN}}

  deploy-flasher-0x60:
    runs-on: ubuntu-latest
    needs: [build-flasher-0x60, create-release]
    permissions: write-all
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: FLASHER-0x60
        path: ./
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: FLASHER-0x60
        asset_name: ${{env.FLASHER_BIN}}
        asset_content_type: application/octet-stream

#-------------------------------------------------------------------------------

  # Flasher for the SLOT2 cartridge
  build-flasher-0x40:
    runs-on: ubuntu-latest
    container: 
      image: z88dk/z88dk

    steps:
    - uses: actions/checkout@v3
    - name: Build launcher application
      run: |
        cd src
        sed -i 's/node[[:digit:]]\+/node2000000/g' Makefile
        make flasher
        ls -alh FLASHER*
    - name: Upload flasher
      uses: actions/upload-artifact@v4
      with:
        name: FLASHER-0x40
        path: src/${{env.FLASHER_BIN}}

  deploy-flasher-0x40:
    runs-on: ubuntu-latest
    needs: [build-flasher-0x40, create-release]
    permissions: write-all
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: FLASHER-0x40
        path: ./
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: FLASHER-0x40
        asset_name: ${{env.FLASHER_BIN}}
        asset_content_type: application/octet-stream

################################################################################

  # Modified BASIC cartridge
  build-basic-0x60:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Install dependencies
      run: sudo apt install -y python3 python3-numpy z80asm make
    - name: Build modified basic cartridge
      run: |
        cd basicmod
        sed -i "s/EQU \$4/EQU \$6/g" bootstrap.asm
        z80asm bootstrap.asm -o bootstrap.bin
        z80asm launcher.asm -o launcher.bin
        python hackrom.py
    - name: Upload
      uses: actions/upload-artifact@v4
      with:
        name: BASICBOOTSTRAP-0x60
        path: basicmod/${{env.BASICROM_BIN}}

  deploy-basic-cartridge-0x60:
    runs-on: ubuntu-latest
    needs: [build-basic-0x60, create-release]
    permissions: write-all
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: BASICBOOTSTRAP-0x60
        path: ./
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ${{env.BASICROM_BIN}}
        asset_name: BASICBOOTSTRAP-0x60
        asset_content_type: application/octet-stream
  
#-------------------------------------------------------------------------------

  # Modified BASIC cartridge
  build-basic-0x40:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Install dependencies
      run: sudo apt install -y python3 python3-numpy z80asm make
    - name: Build modified basic cartridge
      run: |
        cd basicmod
        z80asm bootstrap.asm -o bootstrap.bin
        z80asm launcher.asm -o launcher.bin
        python hackrom.py
    - name: Upload
      uses: actions/upload-artifact@v4
      with:
        name: BASICBOOTSTRAP-0x40
        path: basicmod/${{env.BASICROM_BIN}}

  deploy-basic-cartridge-0x40:
    runs-on: ubuntu-latest
    needs: [build-basic-0x40, create-release]
    permissions: write-all
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: BASICBOOTSTRAP-0x40
        path: ./
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ${{env.BASICROM_BIN}}
        asset_name: BASICBOOTSTRAP-0x40
        asset_content_type: application/octet-stream

################################################################################

  # Multirom cartridge
  build-multirom-0x60:
    runs-on: ubuntu-latest
    needs: [build-basic-0x60, build-flasher-0x60]
    steps:
    - name: Install dependencies
      run: sudo apt install -y wget
    - uses: actions/checkout@v3
    - name: Download modified BASIC rom
      uses: actions/download-artifact@v4
      with:
        name: BASICBOOTSTRAP-0x60
        path: ./
    - name: Download flasher
      uses: actions/download-artifact@v4
      with:
        name: FLASHER-0x60
        path: ./
    - name: Build modified basic cartridge
      run: |
        wget https://github.com/ifilot/p2000t-ram-expansion-board/releases/latest/download/RAMTEST.BIN
        truncate -s 16k ${{env.BASICROM_BIN}}
        truncate -s 16k ${{env.FLASHER_BIN}}
        cat ${{env.BASICROM_BIN}} ${{env.FLASHER_BIN}} RAMTEST.BIN basicmod/BASICROM.BIN > MULTIROM.BIN
    - name: Upload
      uses: actions/upload-artifact@v4
      with:
        name: MULTIROM-0x60
        path: ${{env.MULTIROM_BIN}}

  deploy-multirom-0x60:
    runs-on: ubuntu-latest
    needs: [build-multirom-0x60, create-release]
    permissions: write-all
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name:  MULTIROM-0x60
        path: ./
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ${{env.MULTIROM_BIN}}
        asset_name: MULTIROM-0x60
        asset_content_type: application/octet-stream
  
#-------------------------------------------------------------------------------

  # Multirom cartridge
  build-multirom-0x40:
    runs-on: ubuntu-latest
    needs: [build-basic-0x40, build-flasher-0x40]
    steps:
    - name: Install dependencies
      run: sudo apt install -y wget
    - uses: actions/checkout@v3
    - name: Download modified BASIC rom
      uses: actions/download-artifact@v4
      with:
        name: BASICBOOTSTRAP-0x40
        path: ./
    - name: Download flasher
      uses: actions/download-artifact@v4
      with:
        name: FLASHER-0x40
        path: ./
    - name: Build modified basic cartridge
      run: |
        wget https://github.com/ifilot/p2000t-ram-expansion-board/releases/latest/download/RAMTEST.BIN
        truncate -s 16k ${{env.BASICROM_BIN}}
        truncate -s 16k ${{env.FLASHER_BIN}}
        cat ${{env.BASICROM_BIN}} ${{env.FLASHER_BIN}} RAMTEST.BIN basicmod/BASICROM.BIN > MULTIROM.BIN
    - name: Upload
      uses: actions/upload-artifact@v4
      with:
        name: MULTIROM-0x40
        path: ${{env.MULTIROM_BIN}}

  deploy-multirom-0x40:
    runs-on: ubuntu-latest
    needs: [build-multirom-0x40, create-release]
    permissions: write-all
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: MULTIROM-0x40
        path: ./
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ${{env.MULTIROM_BIN}}
        asset_name: MULTIROM-0x40
        asset_content_type: application/octet-stream

################################################################################

  # custom programs
  build-prg-helloworld:
    runs-on: ubuntu-latest
    container: 
      image: z88dk/z88dk

    steps:
    - uses: actions/checkout@v3
    - name: Build helloworld PRG
      run: |
        cd programs/helloworld
        sed -i 's/node[[:digit:]]\+/node2000000/g' Makefile
        make
        ls -alh
    - name: Upload HELLOWORLD.BIN
      uses: actions/upload-artifact@v4
      with:
        name: HELLOWORLD-UNSIGNED.PRG
        path: programs/helloworld/HELLOWORLD.PRG

  sign-prg-helloworld:
    runs-on: ubuntu-latest
    needs: [build-prg-helloworld]
    permissions: write-all
    steps:
    - uses: actions/checkout@v3
    - name: Install dependencies
      run: sudo apt install -y python3
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: HELLOWORLD-UNSIGNED.PRG
        path: ./
    - name: Sign binary
      run: |
        python3 scripts/signprg.py HELLOWORLD.PRG
    - name: Upload HELLOWORLD.PRG
      uses: actions/upload-artifact@v4
      with:
        name: HELLOWORLD.PRG
        path: HELLOWORLD.PRG

#-------------------------------------------------------------------------------

  build-prg-moncrc16:
    runs-on: ubuntu-latest
    container: 
      image: z88dk/z88dk

    steps:
    - uses: actions/checkout@v3
    - name: Build CRC16 PRG
      run: |
        cd programs/crcmonitor
        sed -i 's/node[[:digit:]]\+/node2000000/g' Makefile
        make
        ls -alh
    - name: Upload MONCRC16.BIN
      uses: actions/upload-artifact@v4
      with:
        name: MONCRC16-UNSIGNED.PRG
        path: programs/crcmonitor/MONCRC16.PRG

  sign-prg-moncrc16:
    runs-on: ubuntu-latest
    needs: [build-prg-moncrc16]
    permissions: write-all
    steps:
    - uses: actions/checkout@v3
    - name: Install dependencies
      run: sudo apt install -y python3
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: MONCRC16-UNSIGNED.PRG
        path: ./
    - name: Sign binary
      run: |
        python3 scripts/signprg.py MONCRC16.PRG
    - name: Upload MONCRC16.PRG
      uses: actions/upload-artifact@v4
      with:
        name: MONCRC16.PRG
        path: MONCRC16.PRG

#-------------------------------------------------------------------------------

  packaging-programs:
    runs-on: ubuntu-latest
    needs: [sign-prg-helloworld, sign-prg-moncrc16]
    permissions: write-all
    steps:
    - name: Download MONCRC16
      uses: actions/download-artifact@v4
      with:
        name: MONCRC16.PRG
        path: ./
    - name: Download HELLOWORLD.PRG
      uses: actions/download-artifact@v4
      with:
        name: HELLOWORLD.PRG
        path: ./
    - name: Upload PROGRAMS.zip
      uses: actions/upload-artifact@v4
      with:
        name: PROGRAMS.zip
        path: |
          *.PRG

  deploy-programs:
    runs-on: ubuntu-latest
    needs: [packaging-programs, create-release]
    permissions: write-all
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
    - name: Download program package
      uses: actions/download-artifact@v4
      with:
        name: PROGRAMS.zip
        path: ./
    - name: Repackage
      run: zip PROGRAMS.zip *.PRG
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: PROGRAMS.zip
        asset_name: PROGRAMS.zip
        asset_content_type: application/octet-stream